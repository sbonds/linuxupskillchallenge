{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"linuxupskillchallenge Learn the skills required to sysadmin a remote Linux server from the commandline. View on GitHub Linux Upskill Challenge A month-long course aimed at those who aspire to get Linux-related jobs in industry - junior Linux sysadmin, devops-related work and similar. Server focussed and commandline, but assumes essentially no prior knowledge, and starts off very gently - designed to be well-suited to a Windows or Apple person as well as those that already using Linux in some form. The course is run via Reddit, so you will need a Reddit login, and to subscribe to: r/linuxupskillchallenge Each weekday a new lesson is posted there, and it allows a great forum-style interface to discuss and get help. This was a $250 paid course, but is now free and fully open source - so costs you nothing but your time! Note: The focus is on practical skills Heavily hands-on Requires a daily commitment of 1-2 hours each day for a month Often points to curated external links. Much less \u2018formal\u2019 than RHEL or Linux Foundation training If you\u2019re keen to do this, then you will need your own Internet-exposed server - but full instructions on how to set this up for free or cheap are now up as \u2018Day 0\u2019 posts in the subreddit. The next course starts on Monday 06 March. As each new lesson gets posted, we\u2019ll be trimming an earlier one - so make sure you keep up! Each month we\u2019ll \u2018reset\u2019, with \u201cDay 1\u201d again going up on the first Monday of the month.","title":"Home"},{"location":"01/","text":"Day 1 - Accessing your server Complementary video A short vid on using ssh in a work environment. Previous \"Day 1\" threads INTRO You should now have a remote server setup running the latest Ubuntu Server LTS (Long Term Support) version. You alone will be administering it. To become a fully-rounded Linux server admin you should become comfortable working with different versions of Linux, but for now Ubuntu is a good choice. Once you have reached a level of comfort at the command-line then you'll find your skills transfer not only to all the standard Linux variants, but also to Android, Apple's OSX, OpenBSD, Solaris and IBM AIX. Throughout the course you'll be working on Linux - but in fact most of what is covered is applicable to any system in the \"UNIX family\" - and the major differences between them are with their graphic user interfaces such as Gnome, Unity, KDE etc - none of which you'll be using! Although there is a \"root\" user, you will be logging in and working from the user account that you setup. Because this is a member of the group \"sudo\" it is able to run commands \"as root\" by preceding them with \"sudo\". YOUR TASKS TODAY Connect and login remotely to your server Run a few simple simple commands to check the status of your server Change your password INSTRUCTIONS The industry standard remote login for Linux and UNIX systems is SSH (\"Secure SHell\"). The SSH server software runs on our Linux host and we use an SSH client to connect. There are lots of options on SSH clients. So many that it can be confusing to know which one to use. The choice largely depends on the operating system of whatever you're using to connect. No matter what you're using, you will need the IP address of the server you're connecting to. Finding this varies by cloud provider, so refer back to the \"Day 0\" document you used for information on finding this. It's one of the very last steps. Windows GUI SSH clients for Windows PuTTY MobaXterm MacOS TODO: Screenshots of opening a terminal and running the ssh command from the command line On an MacOS machine you'll normally access the command line via Terminal.app - it's in the Utilities sub-folder of Applications. GUI SSH clients for MacOS: Terminal.app iTerm2 Linux/UNIX If you're using any Linux or Unix system then you can simply open up a local command line session and use your command-line ssh client like this: ssh user@<ip address> For example: ssh support@192.123.321.99 On Linux distributions with a menu you'll typically find the terminal under \"Applications menu -> Accessories -> Terminal\", \"Applications menu -> System -> Terminal\" or \"Menu -> System -> Terminal Program (Konsole)\"- or you can simply search for your terminal application. In many cases Ctrl+Alt+T will also bring up a terminal windows. First connect warning Regardless of which client you use, the first time you connect to your server, you may receive a warning that you're connecting to a new server - and be asked if you wish to \"cache the host key\". Do this. Now, if you get a warning in future connections it means that either: (a) you are being fooled into connecting to a different machine or (b) someone may be trying a \"man in the middle\" attack. So, now login to your server as your user - and remember that Linux is case-sensitive regarding user names, as well as passwords. Once logged in, notice that the \"command prompt\" that you receive ends in $ - this is the convention for an ordinary user, whereas the \"root\" user with full administrative power has a # prompt. Try these simple commands: ls -al uptime free df -h uname -a Change your password Now is a good time to ensure that your password is very strong and unique - i.e. At least 10 characters - because your server is fully exposed to bots that will be continuously attempting to break in. While it's significantly less likely that your non-default (e.g. not \"root\") account will be targeted, it's still possible. If you created a very strong password for your non-root user, this step is optional, though still good practice. Use the passwd command to change your password. To do this, create/generate a new, secure password, then simply type passwd , press \"Enter\" and give your current password when prompted, then the new one you've chosen, confirm it - and then WRITE IT DOWN somewhere. Practice copying text out of your SSH session It's very handy to be able to copy and paste text between your remote session and your local desktop, so spend some time getting confident with how to do this in your setup. The paste method varies by SSH client and in many cases is configurable within the SSH client. Open up a local text editor (e.g. Notepad++, Visual Studio Code) and copy some text from your screen into the text editor. Practice copying text into your SSH session In your text editor add \"ls -al\" and copy the text. Paste it onto a prompt and press enter. Try adding a blank line after \"ls -al\" in your text editor and copying the command plus the start of the next line. Paste that into a prompt. What happened that was different? (It should have copied the \"enter\" too, making it unnecessary to type enter yourself. Is this a good thing? Bad thing? Both?) Log out Log out by typing exit or another method you've used before and enjoy. Customize SSH client You'll be spending a lot of time in your SSH client, so it pays to spend some time customizing it. At the very least try \"black on white\" and \"green on black\" - and experiment with different monospaced fonts, (\"Ubuntu Mono\" is free to download, and very nice). POSTING YOUR PROGRESS Regularly posting your progress can be a helpful motivator. Feel free to post to the subreddit a small introduction of yourself, and your Linux background for your \"classmates\" - and notes on how each day has gone. Of course, also drop in a note if you get stuck or spot errors in these notes. WRAP You now have the ability to login remotely to your own server. Perhaps you might now try logging in from home and work - even from your smartphone! - using an ssh client app such as \"Termux\". As a server admin you'll need to be comfortable logging in from all over. You can also potentially use JavaScript ssh clients (search for \"consolefish\"), or from a cybercafe - but these options involve putting more trust in third-parties than most sysadmins would be comfortable with when accessing production systems. A NOTE ON \"HARDENING\" Your server is protected by the fact that its security updates are up to date, and that you've set Long Strong Unique passwords - or are using public keys. While exposed to the world, and very likely under continuous attack, it should be perfectly secure. Next week we'll look at how we can view those attacks, but for now it's simply important to state that while it's OK to read up on \"SSH hardening\", things such as changing the default port and fail2ban are unnecessary and unhelpful when we're trying to learn - and you are perfectly safe without them. EXTENSION If this is all too easy, then spend some time reading up on: SSH Tunneling Password-less SSH login SSH client configuration RESOURCES \"Using PuTTY for SSH (Windows)\" Comparing CENTOS and Ubuntu for servers A Beginners Guide to SSH Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 1"},{"location":"01/#day-1-accessing-your-server","text":"Complementary video A short vid on using ssh in a work environment. Previous \"Day 1\" threads","title":"Day 1 - Accessing your server"},{"location":"01/#intro","text":"You should now have a remote server setup running the latest Ubuntu Server LTS (Long Term Support) version. You alone will be administering it. To become a fully-rounded Linux server admin you should become comfortable working with different versions of Linux, but for now Ubuntu is a good choice. Once you have reached a level of comfort at the command-line then you'll find your skills transfer not only to all the standard Linux variants, but also to Android, Apple's OSX, OpenBSD, Solaris and IBM AIX. Throughout the course you'll be working on Linux - but in fact most of what is covered is applicable to any system in the \"UNIX family\" - and the major differences between them are with their graphic user interfaces such as Gnome, Unity, KDE etc - none of which you'll be using! Although there is a \"root\" user, you will be logging in and working from the user account that you setup. Because this is a member of the group \"sudo\" it is able to run commands \"as root\" by preceding them with \"sudo\".","title":"INTRO"},{"location":"01/#your-tasks-today","text":"Connect and login remotely to your server Run a few simple simple commands to check the status of your server Change your password","title":"YOUR TASKS TODAY"},{"location":"01/#instructions","text":"The industry standard remote login for Linux and UNIX systems is SSH (\"Secure SHell\"). The SSH server software runs on our Linux host and we use an SSH client to connect. There are lots of options on SSH clients. So many that it can be confusing to know which one to use. The choice largely depends on the operating system of whatever you're using to connect. No matter what you're using, you will need the IP address of the server you're connecting to. Finding this varies by cloud provider, so refer back to the \"Day 0\" document you used for information on finding this. It's one of the very last steps.","title":"INSTRUCTIONS"},{"location":"01/#windows","text":"GUI SSH clients for Windows PuTTY MobaXterm","title":"Windows"},{"location":"01/#macos","text":"TODO: Screenshots of opening a terminal and running the ssh command from the command line On an MacOS machine you'll normally access the command line via Terminal.app - it's in the Utilities sub-folder of Applications. GUI SSH clients for MacOS: Terminal.app iTerm2","title":"MacOS"},{"location":"01/#linuxunix","text":"If you're using any Linux or Unix system then you can simply open up a local command line session and use your command-line ssh client like this: ssh user@<ip address> For example: ssh support@192.123.321.99 On Linux distributions with a menu you'll typically find the terminal under \"Applications menu -> Accessories -> Terminal\", \"Applications menu -> System -> Terminal\" or \"Menu -> System -> Terminal Program (Konsole)\"- or you can simply search for your terminal application. In many cases Ctrl+Alt+T will also bring up a terminal windows.","title":"Linux/UNIX"},{"location":"01/#first-connect-warning","text":"Regardless of which client you use, the first time you connect to your server, you may receive a warning that you're connecting to a new server - and be asked if you wish to \"cache the host key\". Do this. Now, if you get a warning in future connections it means that either: (a) you are being fooled into connecting to a different machine or (b) someone may be trying a \"man in the middle\" attack. So, now login to your server as your user - and remember that Linux is case-sensitive regarding user names, as well as passwords. Once logged in, notice that the \"command prompt\" that you receive ends in $ - this is the convention for an ordinary user, whereas the \"root\" user with full administrative power has a # prompt. Try these simple commands: ls -al uptime free df -h uname -a","title":"First connect warning"},{"location":"01/#change-your-password","text":"Now is a good time to ensure that your password is very strong and unique - i.e. At least 10 characters - because your server is fully exposed to bots that will be continuously attempting to break in. While it's significantly less likely that your non-default (e.g. not \"root\") account will be targeted, it's still possible. If you created a very strong password for your non-root user, this step is optional, though still good practice. Use the passwd command to change your password. To do this, create/generate a new, secure password, then simply type passwd , press \"Enter\" and give your current password when prompted, then the new one you've chosen, confirm it - and then WRITE IT DOWN somewhere.","title":"Change your password"},{"location":"01/#practice-copying-text-out-of-your-ssh-session","text":"It's very handy to be able to copy and paste text between your remote session and your local desktop, so spend some time getting confident with how to do this in your setup. The paste method varies by SSH client and in many cases is configurable within the SSH client. Open up a local text editor (e.g. Notepad++, Visual Studio Code) and copy some text from your screen into the text editor.","title":"Practice copying text out of your SSH session"},{"location":"01/#practice-copying-text-into-your-ssh-session","text":"In your text editor add \"ls -al\" and copy the text. Paste it onto a prompt and press enter. Try adding a blank line after \"ls -al\" in your text editor and copying the command plus the start of the next line. Paste that into a prompt. What happened that was different? (It should have copied the \"enter\" too, making it unnecessary to type enter yourself. Is this a good thing? Bad thing? Both?)","title":"Practice copying text into your SSH session"},{"location":"01/#log-out","text":"Log out by typing exit or another method you've used before and enjoy.","title":"Log out"},{"location":"01/#customize-ssh-client","text":"You'll be spending a lot of time in your SSH client, so it pays to spend some time customizing it. At the very least try \"black on white\" and \"green on black\" - and experiment with different monospaced fonts, (\"Ubuntu Mono\" is free to download, and very nice).","title":"Customize SSH client"},{"location":"01/#posting-your-progress","text":"Regularly posting your progress can be a helpful motivator. Feel free to post to the subreddit a small introduction of yourself, and your Linux background for your \"classmates\" - and notes on how each day has gone. Of course, also drop in a note if you get stuck or spot errors in these notes.","title":"POSTING YOUR PROGRESS"},{"location":"01/#wrap","text":"You now have the ability to login remotely to your own server. Perhaps you might now try logging in from home and work - even from your smartphone! - using an ssh client app such as \"Termux\". As a server admin you'll need to be comfortable logging in from all over. You can also potentially use JavaScript ssh clients (search for \"consolefish\"), or from a cybercafe - but these options involve putting more trust in third-parties than most sysadmins would be comfortable with when accessing production systems.","title":"WRAP"},{"location":"01/#a-note-on-hardening","text":"Your server is protected by the fact that its security updates are up to date, and that you've set Long Strong Unique passwords - or are using public keys. While exposed to the world, and very likely under continuous attack, it should be perfectly secure. Next week we'll look at how we can view those attacks, but for now it's simply important to state that while it's OK to read up on \"SSH hardening\", things such as changing the default port and fail2ban are unnecessary and unhelpful when we're trying to learn - and you are perfectly safe without them.","title":"A NOTE ON \"HARDENING\""},{"location":"01/#extension","text":"If this is all too easy, then spend some time reading up on: SSH Tunneling Password-less SSH login SSH client configuration","title":"EXTENSION"},{"location":"01/#resources","text":"\"Using PuTTY for SSH (Windows)\" Comparing CENTOS and Ubuntu for servers A Beginners Guide to SSH Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"02/","text":"Day 2 - Basic navigation Complementary video Previous \"Day 2\" threads INTRO Most computer users outside of the Linux and Unix world don't spend much time at the command-line now, but as a Linux sysadmin this is your default working environment - so you need to be skilled in it. When you use a graphic desktop such as Windows or Apple's macOS (or even the latest Linux flavors), then increasingly you are presented with simple \"places\" where your stuff is stored - \"Pictures\" \"Music\" etc but if you're even moderately technical then you'll realize that underneath all this is a hierarchical \"directory structure\" of \"folders\" (e.g. C:\\Users\\Steve\\Desktop on Windows or /Users/Steve/Desktop on macOS - and on a Desktop Linux system /home/steve/Desktop ) From now on, the course will point you to a range of good online resources for a topic, and then set you a simple set of tasks to achieve. It's perfectly fine to google for other online resources, refer to any books you have etc - and in fact a fundamental element of the design of this course is to force you to do a bit of your own research. Even the most experienced sysadmins will do an online search to find advice for how to use commands - so the sooner you too get into that habit the better! YOUR TASKS TODAY Use the provided resources to check out the basic commands and concepts Login to your server via SSH and move about the directory structure at the command-line Take note of how your \"prompt\" changes as you change directory Be sure to understand how cd on its own takes you back to your \"home directory\" Understand what cd ~ and cd .. do Use the ls command to list the contents of directories, and try several of the \"switches\" - in particular ls -ltr to show the most recently altered file last Use the mkdir command to create a new directory (folder) test in your home folder ( e.g /home/support/test ) STEP-BY-STEP / is the \"root\" of a branching tree of folders, known as directories At all times you are \"in\" one part of the system. Your current location in the directory tree is your \"working directory\" The command pwd (\"print working directory\") will show you where you are. Try it now. pwd should show something like /home/<name> cd (\"change directory\") moves to different areas - so cd /var/log will take you into the /var/log directory - do this and then check with pwd - and look to see if your prompt changes to reflect your location. Generally your prompt is also configured to give you at least some of this information, so if I'm \"in\" the /etc directory then the prompt might be \"steve@202.203.203.22: /etc>$\" or simply \"/etc: $\" Your prompt should have changed to reflect your change to the /var/log directory. You can move \"up\" the structure by typing cd .. ( \"cee dee dot dot \") You are already in /var/log/ . Type cd .. and then cd .. again - watching your prompt carefully, or typing pwd each time, to clarify your present working directory. A \"relative\" location is based on your present working directory - e.g. if you first cd /var then pwd will confirm that you are \"in\" /var , and you can move to /var/log in two ways - either by providing the full path with cd /var/log or simply the \"relative\" path with the command cd log A simple cd will always return you to your own defined \"home directory\", also referred to as ~ (the \"tilde\" character) [NB: this differs from DOS/Windows] What files are in a folder? The ls (list) command will give you a list of the files and directories under your current location. Like many Linux commands, there are options (known as \"switches\") to alter the meaning of the command or the output format. For example ls -a -l or ls -l -t -r -a By convention, files with a starting character of \".\" are considered hidden and the ls , and many other commands, will ignore them. The -a switch includes them. A note on switches: Generally most Linux command will accept one or more \"parameters\", and one or more \"switches\". So, when we say ls -l /var/log the \" -l \" is a switch to say \"long format\" and the \" /var/log \" is the \"parameter\". Many commands accept a large number of switches, and these can generally be combined (so from now on, use ls -ltra , rather than ls -l -t -r -a You can make a new folder/directory with the mkdir command, so move to your home directory, type pwd to check that you are indeed in the correct place, and then create a directory, for example to create one called \"test\", simply type mkdir test . Now use the ls command to see the result. Commands step-by-step Login to your server using ssh pwd cd /var/log cd .. cd .. cd /var cd log cd ls ls -a -l ls -l -t -r -a ls -l /var/log ls -ltra cd pwd ls -ltra mkdir test ls -l RTFM This is a good time to mention that Linux comes with a fine on-line manual - invoked with the man command. Each application installed comes with its own page in this manual, so that you can look at the page for pwd to see the full detail on the syntax like this: man pwd You might also try: man cp man mv man grep man ls man man As you'll see, these are excellent for the detailed syntax of a command, but many are extremely terse, and for others the amount of detail can be somewhat daunting! WRAP Being able to move confidently around the directory structure at the command line is important, so don't think you can skip it! However, these skills are something that you'll be constantly using over the twenty days of the course, so don't despair if this doesn't immediately \"click.\" EXTENSION If this is already something that you're very familiar with, then: Learn about pushd and popd to navigate around multiple directories easily. Running pushd /var/log moves you to to the /var/log , but keeps track of where you were. You can pushd more than one directory at a time. Try it out: pushd /var/log , pushd /dev , pushd /etc , pushd , popd , popd . Note how pushd with no arguments switches between the last two pushed directories but more complex navigation is also possible . Finally, cd - also moves you the last visited directory. Take the time today to understand how the environment variable PS1 etc work (this article: Bash Shell: Take Control of PS1, PS2, PS3, PS4 and PROMPT_COMMAND is a good start). Set yourself up with a custom prompt using the information in Bash Shell PS1: 10 Examples to Make Your Linux Prompt like Angelina Jolie Details of \"ls -l\" output This section is informational, there are no tasks here, but understanding \"ls -l\" is useful for seeing the technical depth present in Linux. You'll see this again in more detail on day 13 . sbonds_adm@sbonds002:/var/log$ ls -l total 11652 -rw-r--r-- 1 root root 527 Mar 15 03:05 alternatives.log drwxr-xr-x 2 root root 4096 Mar 15 06:21 apt -rw-r----- 1 syslog adm 5290090 Mar 15 22:12 auth.log -rw-rw---- 1 root utmp 5786880 Mar 15 22:11 btmp -rw-r--r-- 1 root root 8764 Mar 15 22:11 cloud-init-output.log -rw-r--r-- 1 syslog adm 203977 Mar 15 22:11 cloud-init.log drwxr-xr-x 2 root root 4096 Oct 7 16:49 dist-upgrade -rw-r--r-- 1 root adm 42480 Mar 15 22:11 dmesg -rw-r--r-- 1 root adm 42073 Mar 15 02:58 dmesg.0 -rw-r--r-- 1 root root 94322 Mar 15 06:21 dpkg.log drwxr-sr-x+ 3 root systemd-journal 4096 Mar 15 02:58 journal -rw-r----- 1 syslog adm 114862 Mar 15 22:11 kern.log drwxr-xr-x 2 landscape landscape 4096 Mar 15 03:00 landscape -rw-rw-r-- 1 root utmp 292292 Mar 15 22:12 lastlog drwx------ 2 root root 4096 Mar 15 02:58 private -rw-r----- 1 syslog adm 263674 Mar 15 22:12 syslog drwxr-x--- 2 root adm 4096 Mar 15 06:21 unattended-upgrades -rw-rw-r-- 1 root utmp 9984 Mar 15 22:12 wtmp Example of a simple file: -rw-r--r-- 1 root root 527 Mar 15 03:05 alternatives.log Breakdown of each section: -rw-r--r-- : permissions r/w/x for read, write, execute for user, group, and everyone else (\"other\") 1 : number of links to the actual data. Usually 1 but you can have two different filenames pointing at the same actual file via \"hard links.\" root : user name the owner-level permissions root : group name the group-level permissions 527 : file size in bytes Mar 15 03:05 : date the file was last modified alternatives.log : name of the file Example of some odd things: drwxr-sr-x+ 3 root systemd-journal 4096 Mar 15 02:58 journal Why is there an \"s\" instead of an \"x\"? What is that \"+\" at the end? The \"s\" means set-group-id and on a directory it means that any files created in that directory end up with their group ownership set to match the directory's group. E.g. new files created in there are owned by group \"systemd-journal\". The \"+\" means there are additional permissions beyond the traditional basic UNIX permissions present on that directory. These are part of filesystem access control lists (ACLs). You can see those details with the \"getfacl\" command which is not installed by default in many cases. (\"apt-get install acl\" if you want that command.) RESOURCES Explore the Linux file system Linux File System Simple Terminal Commands on Ubuntu Solaris Unix Commands Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 2"},{"location":"02/#day-2-basic-navigation","text":"Complementary video Previous \"Day 2\" threads","title":"Day 2 - Basic navigation"},{"location":"02/#intro","text":"Most computer users outside of the Linux and Unix world don't spend much time at the command-line now, but as a Linux sysadmin this is your default working environment - so you need to be skilled in it. When you use a graphic desktop such as Windows or Apple's macOS (or even the latest Linux flavors), then increasingly you are presented with simple \"places\" where your stuff is stored - \"Pictures\" \"Music\" etc but if you're even moderately technical then you'll realize that underneath all this is a hierarchical \"directory structure\" of \"folders\" (e.g. C:\\Users\\Steve\\Desktop on Windows or /Users/Steve/Desktop on macOS - and on a Desktop Linux system /home/steve/Desktop ) From now on, the course will point you to a range of good online resources for a topic, and then set you a simple set of tasks to achieve. It's perfectly fine to google for other online resources, refer to any books you have etc - and in fact a fundamental element of the design of this course is to force you to do a bit of your own research. Even the most experienced sysadmins will do an online search to find advice for how to use commands - so the sooner you too get into that habit the better!","title":"INTRO"},{"location":"02/#your-tasks-today","text":"Use the provided resources to check out the basic commands and concepts Login to your server via SSH and move about the directory structure at the command-line Take note of how your \"prompt\" changes as you change directory Be sure to understand how cd on its own takes you back to your \"home directory\" Understand what cd ~ and cd .. do Use the ls command to list the contents of directories, and try several of the \"switches\" - in particular ls -ltr to show the most recently altered file last Use the mkdir command to create a new directory (folder) test in your home folder ( e.g /home/support/test )","title":"YOUR TASKS TODAY"},{"location":"02/#step-by-step","text":"/ is the \"root\" of a branching tree of folders, known as directories At all times you are \"in\" one part of the system. Your current location in the directory tree is your \"working directory\" The command pwd (\"print working directory\") will show you where you are. Try it now. pwd should show something like /home/<name> cd (\"change directory\") moves to different areas - so cd /var/log will take you into the /var/log directory - do this and then check with pwd - and look to see if your prompt changes to reflect your location. Generally your prompt is also configured to give you at least some of this information, so if I'm \"in\" the /etc directory then the prompt might be \"steve@202.203.203.22: /etc>$\" or simply \"/etc: $\" Your prompt should have changed to reflect your change to the /var/log directory. You can move \"up\" the structure by typing cd .. ( \"cee dee dot dot \") You are already in /var/log/ . Type cd .. and then cd .. again - watching your prompt carefully, or typing pwd each time, to clarify your present working directory. A \"relative\" location is based on your present working directory - e.g. if you first cd /var then pwd will confirm that you are \"in\" /var , and you can move to /var/log in two ways - either by providing the full path with cd /var/log or simply the \"relative\" path with the command cd log A simple cd will always return you to your own defined \"home directory\", also referred to as ~ (the \"tilde\" character) [NB: this differs from DOS/Windows] What files are in a folder? The ls (list) command will give you a list of the files and directories under your current location. Like many Linux commands, there are options (known as \"switches\") to alter the meaning of the command or the output format. For example ls -a -l or ls -l -t -r -a By convention, files with a starting character of \".\" are considered hidden and the ls , and many other commands, will ignore them. The -a switch includes them. A note on switches: Generally most Linux command will accept one or more \"parameters\", and one or more \"switches\". So, when we say ls -l /var/log the \" -l \" is a switch to say \"long format\" and the \" /var/log \" is the \"parameter\". Many commands accept a large number of switches, and these can generally be combined (so from now on, use ls -ltra , rather than ls -l -t -r -a You can make a new folder/directory with the mkdir command, so move to your home directory, type pwd to check that you are indeed in the correct place, and then create a directory, for example to create one called \"test\", simply type mkdir test . Now use the ls command to see the result.","title":"STEP-BY-STEP"},{"location":"02/#commands-step-by-step","text":"Login to your server using ssh pwd cd /var/log cd .. cd .. cd /var cd log cd ls ls -a -l ls -l -t -r -a ls -l /var/log ls -ltra cd pwd ls -ltra mkdir test ls -l","title":"Commands step-by-step"},{"location":"02/#rtfm","text":"This is a good time to mention that Linux comes with a fine on-line manual - invoked with the man command. Each application installed comes with its own page in this manual, so that you can look at the page for pwd to see the full detail on the syntax like this: man pwd You might also try: man cp man mv man grep man ls man man As you'll see, these are excellent for the detailed syntax of a command, but many are extremely terse, and for others the amount of detail can be somewhat daunting!","title":"RTFM"},{"location":"02/#wrap","text":"Being able to move confidently around the directory structure at the command line is important, so don't think you can skip it! However, these skills are something that you'll be constantly using over the twenty days of the course, so don't despair if this doesn't immediately \"click.\"","title":"WRAP"},{"location":"02/#extension","text":"If this is already something that you're very familiar with, then: Learn about pushd and popd to navigate around multiple directories easily. Running pushd /var/log moves you to to the /var/log , but keeps track of where you were. You can pushd more than one directory at a time. Try it out: pushd /var/log , pushd /dev , pushd /etc , pushd , popd , popd . Note how pushd with no arguments switches between the last two pushed directories but more complex navigation is also possible . Finally, cd - also moves you the last visited directory. Take the time today to understand how the environment variable PS1 etc work (this article: Bash Shell: Take Control of PS1, PS2, PS3, PS4 and PROMPT_COMMAND is a good start). Set yourself up with a custom prompt using the information in Bash Shell PS1: 10 Examples to Make Your Linux Prompt like Angelina Jolie","title":"EXTENSION"},{"location":"02/#details-of-ls-l-output","text":"This section is informational, there are no tasks here, but understanding \"ls -l\" is useful for seeing the technical depth present in Linux. You'll see this again in more detail on day 13 . sbonds_adm@sbonds002:/var/log$ ls -l total 11652 -rw-r--r-- 1 root root 527 Mar 15 03:05 alternatives.log drwxr-xr-x 2 root root 4096 Mar 15 06:21 apt -rw-r----- 1 syslog adm 5290090 Mar 15 22:12 auth.log -rw-rw---- 1 root utmp 5786880 Mar 15 22:11 btmp -rw-r--r-- 1 root root 8764 Mar 15 22:11 cloud-init-output.log -rw-r--r-- 1 syslog adm 203977 Mar 15 22:11 cloud-init.log drwxr-xr-x 2 root root 4096 Oct 7 16:49 dist-upgrade -rw-r--r-- 1 root adm 42480 Mar 15 22:11 dmesg -rw-r--r-- 1 root adm 42073 Mar 15 02:58 dmesg.0 -rw-r--r-- 1 root root 94322 Mar 15 06:21 dpkg.log drwxr-sr-x+ 3 root systemd-journal 4096 Mar 15 02:58 journal -rw-r----- 1 syslog adm 114862 Mar 15 22:11 kern.log drwxr-xr-x 2 landscape landscape 4096 Mar 15 03:00 landscape -rw-rw-r-- 1 root utmp 292292 Mar 15 22:12 lastlog drwx------ 2 root root 4096 Mar 15 02:58 private -rw-r----- 1 syslog adm 263674 Mar 15 22:12 syslog drwxr-x--- 2 root adm 4096 Mar 15 06:21 unattended-upgrades -rw-rw-r-- 1 root utmp 9984 Mar 15 22:12 wtmp Example of a simple file: -rw-r--r-- 1 root root 527 Mar 15 03:05 alternatives.log Breakdown of each section: -rw-r--r-- : permissions r/w/x for read, write, execute for user, group, and everyone else (\"other\") 1 : number of links to the actual data. Usually 1 but you can have two different filenames pointing at the same actual file via \"hard links.\" root : user name the owner-level permissions root : group name the group-level permissions 527 : file size in bytes Mar 15 03:05 : date the file was last modified alternatives.log : name of the file Example of some odd things: drwxr-sr-x+ 3 root systemd-journal 4096 Mar 15 02:58 journal Why is there an \"s\" instead of an \"x\"? What is that \"+\" at the end? The \"s\" means set-group-id and on a directory it means that any files created in that directory end up with their group ownership set to match the directory's group. E.g. new files created in there are owned by group \"systemd-journal\". The \"+\" means there are additional permissions beyond the traditional basic UNIX permissions present on that directory. These are part of filesystem access control lists (ACLs). You can see those details with the \"getfacl\" command which is not installed by default in many cases. (\"apt-get install acl\" if you want that command.)","title":"Details of \"ls -l\" output"},{"location":"02/#resources","text":"Explore the Linux file system Linux File System Simple Terminal Commands on Ubuntu Solaris Unix Commands Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"03/","text":"Day 3 - Power trip! Complementary video Previous \"Day 3\" threads INTRO You've been logging in as an ordinary user at your server, yet you're probably aware that root is the power user on a Linux system. This administrative or \"superuser\" account, is all powerful - and a typo in a command could potentially cripple your server. As a sysadmin you're typically working on systems that are both important and remote, so avoiding such mistakes is A Very Good Idea. In order to ensure that actions taken can be tied back to specific people, it's a security Best Practice to discourage or disallow login directly by root - and instead to give specified trusted users the permission to run root-only commands via the sudo command. This is the way that your server has been set-up, with your \"ordinary\" login given the ability to run any root-only command - but only if you precede it with sudo . Sometimes sudo will ask for a password and sometimes it will not. This is configurable and can range from \"every time\" to \"after a certain number of minutes of non-use\" all the way to \"never.\" YOUR TASKS TODAY Use the links in the \"Resources\" section below to understand how sudo works Use ls -l to check the permissions of /etc/shadow - notice that only root has any access. Can you use cat , less or nano to view it? This file is where the hashed passwords are kept. It is a prime target for intruders - who aim to grab it and use offline password crackers to discover the passwords. Now try with sudo , e.g. sudo less /etc/shadow Test running the reboot command, and then via sudo (i.e. sudo reboot ) Once you've reconnected back: Use the uptime command to confirm that your server did actually fully restart Test fully \"becoming root\" by the command sudo -i This can be handy if you have a series of commands to do \"as root\". Note the change to your prompt. Type exit or logout to get back to your own normal \"support\" login. Use less to view the file /var/log/auth.log , where any use of sudo is logged You could \"filter\" this by typing: grep \"sudo\" /var/log/auth.log If you wish to, you can now rename your server. Traditionally you would do this by editing two files, /etc/hostname and /etc/hosts and then rebooting - but the more modern, and recommended, way is to use the hostnamectl command; like this: sudo hostnamectl set-hostname mylittlecloudbox No reboot is required. For a cloud server, you might find that the hostname changes after a reboot. To prevent this, edit /etc/cloud/cloud.cfg and change the \"preserve_hostname\" line to read: preserve_hostname: true You might also consider changing the timezone your server uses. By default this is likely to be UTC (i.e. GMT) - which is pretty appropriate for a worldwide fleet of servers. You could also set it to the zone the server is in, or where you and your headquarters are. For a company this is a decision not to be taken lightly, but for now you can simply change as you please! First check the current setting with: timedatectl Then get a a list of available timezones: timedatectl list-timezones And finally select one, like this: sudo timedatectl set-timezone Australia/Sydney Confirm: timedatectl The major practical effects of this are (1) the timing of scheduled tasks, and (2) the timestamping of the logs files kept under /var/log . If you make a change, there will naturally be a \"jump\" in the dates and time recorded. WRAP As a Linux sysadmin you may be working on client or custom systems where you have little control, and many of these will default to doing everything as root . You need to be able to safely work on such systems - where your only protection is to double check before pressing Enter . On the other hand, for any systems where you have full control, setting up a \"normal\" account for yourself (and any co-admins) with permission to run sudo is recommended. While this is standard with Ubuntu, it's also easy to configure with other popular server distros such as Debian, CentOS and RHEL. A NOTE ON \"HARDENING\" Your server is protected by the fact that its security updates are up to date, and that you've set Long Strong Unique passwords - or are using public keys. While exposed to the world, and very likely under continuous attack, it should be perfectly secure. Next week we'll look at how we can view those attacks, but for now it's simply important to state that while it's OK to read up on \"SSH hardening\", things such as changing the default port and fail2ban are unnecessary and unhelpful when we're trying to learn - and you are perfectly safe without them. EXTENSION Read Hardening SSH PASSWORDS AND HASHES Earlier we mentioned \"hashed passwords\" are stored. What does this mean? Why not just store the actual password? Basically, because if the place where the passwords are stored gets in the hands of someone it shouldn't, now every known password is simultaneously revealed. This is sometimes how those data breaches we see in the news, end up in the news. Instead, when a user sets their password, the entered text is mixed up mathematically in a specific way that is hard to reverse, called a cryptographic hash function. This is combined with some extra data (a \"salt\") to defeat certain classes of pre-computed password attacks, and that result gets stored. When they log in again, whatever they type undergoes the same proces. If the end results matches, then what they typed was the correct password. If it doesn't match, that wasn't the right password. However, there's no way to take the hashed password and reverse it back to the original. It's certainly possible to make a lot of guesses and keep doing that forward hashing process until a match is found. This is why it's important to choose a hard-to-guess password. If someone breaks into a system you own, they can create a lot of work for you to clean up, damage the reputation of your company, attempt to extort money, use your systems to attack others, or all of the above. RESOURCES This cartoon explains it nicely! Sudo in Ubuntu How to use \"sudo\" This is how password cracking is done O'Reilly Book: Practical UNIX and Internet Security on UNIX passwords Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 3"},{"location":"03/#day-3-power-trip","text":"Complementary video Previous \"Day 3\" threads","title":"Day 3 - Power trip!"},{"location":"03/#intro","text":"You've been logging in as an ordinary user at your server, yet you're probably aware that root is the power user on a Linux system. This administrative or \"superuser\" account, is all powerful - and a typo in a command could potentially cripple your server. As a sysadmin you're typically working on systems that are both important and remote, so avoiding such mistakes is A Very Good Idea. In order to ensure that actions taken can be tied back to specific people, it's a security Best Practice to discourage or disallow login directly by root - and instead to give specified trusted users the permission to run root-only commands via the sudo command. This is the way that your server has been set-up, with your \"ordinary\" login given the ability to run any root-only command - but only if you precede it with sudo . Sometimes sudo will ask for a password and sometimes it will not. This is configurable and can range from \"every time\" to \"after a certain number of minutes of non-use\" all the way to \"never.\"","title":"INTRO"},{"location":"03/#your-tasks-today","text":"Use the links in the \"Resources\" section below to understand how sudo works Use ls -l to check the permissions of /etc/shadow - notice that only root has any access. Can you use cat , less or nano to view it? This file is where the hashed passwords are kept. It is a prime target for intruders - who aim to grab it and use offline password crackers to discover the passwords. Now try with sudo , e.g. sudo less /etc/shadow Test running the reboot command, and then via sudo (i.e. sudo reboot ) Once you've reconnected back: Use the uptime command to confirm that your server did actually fully restart Test fully \"becoming root\" by the command sudo -i This can be handy if you have a series of commands to do \"as root\". Note the change to your prompt. Type exit or logout to get back to your own normal \"support\" login. Use less to view the file /var/log/auth.log , where any use of sudo is logged You could \"filter\" this by typing: grep \"sudo\" /var/log/auth.log If you wish to, you can now rename your server. Traditionally you would do this by editing two files, /etc/hostname and /etc/hosts and then rebooting - but the more modern, and recommended, way is to use the hostnamectl command; like this: sudo hostnamectl set-hostname mylittlecloudbox No reboot is required. For a cloud server, you might find that the hostname changes after a reboot. To prevent this, edit /etc/cloud/cloud.cfg and change the \"preserve_hostname\" line to read: preserve_hostname: true You might also consider changing the timezone your server uses. By default this is likely to be UTC (i.e. GMT) - which is pretty appropriate for a worldwide fleet of servers. You could also set it to the zone the server is in, or where you and your headquarters are. For a company this is a decision not to be taken lightly, but for now you can simply change as you please! First check the current setting with: timedatectl Then get a a list of available timezones: timedatectl list-timezones And finally select one, like this: sudo timedatectl set-timezone Australia/Sydney Confirm: timedatectl The major practical effects of this are (1) the timing of scheduled tasks, and (2) the timestamping of the logs files kept under /var/log . If you make a change, there will naturally be a \"jump\" in the dates and time recorded.","title":"YOUR TASKS TODAY"},{"location":"03/#wrap","text":"As a Linux sysadmin you may be working on client or custom systems where you have little control, and many of these will default to doing everything as root . You need to be able to safely work on such systems - where your only protection is to double check before pressing Enter . On the other hand, for any systems where you have full control, setting up a \"normal\" account for yourself (and any co-admins) with permission to run sudo is recommended. While this is standard with Ubuntu, it's also easy to configure with other popular server distros such as Debian, CentOS and RHEL.","title":"WRAP"},{"location":"03/#a-note-on-hardening","text":"Your server is protected by the fact that its security updates are up to date, and that you've set Long Strong Unique passwords - or are using public keys. While exposed to the world, and very likely under continuous attack, it should be perfectly secure. Next week we'll look at how we can view those attacks, but for now it's simply important to state that while it's OK to read up on \"SSH hardening\", things such as changing the default port and fail2ban are unnecessary and unhelpful when we're trying to learn - and you are perfectly safe without them.","title":"A NOTE ON \"HARDENING\""},{"location":"03/#extension","text":"Read Hardening SSH","title":"EXTENSION"},{"location":"03/#passwords-and-hashes","text":"Earlier we mentioned \"hashed passwords\" are stored. What does this mean? Why not just store the actual password? Basically, because if the place where the passwords are stored gets in the hands of someone it shouldn't, now every known password is simultaneously revealed. This is sometimes how those data breaches we see in the news, end up in the news. Instead, when a user sets their password, the entered text is mixed up mathematically in a specific way that is hard to reverse, called a cryptographic hash function. This is combined with some extra data (a \"salt\") to defeat certain classes of pre-computed password attacks, and that result gets stored. When they log in again, whatever they type undergoes the same proces. If the end results matches, then what they typed was the correct password. If it doesn't match, that wasn't the right password. However, there's no way to take the hashed password and reverse it back to the original. It's certainly possible to make a lot of guesses and keep doing that forward hashing process until a match is found. This is why it's important to choose a hard-to-guess password. If someone breaks into a system you own, they can create a lot of work for you to clean up, damage the reputation of your company, attempt to extort money, use your systems to attack others, or all of the above.","title":"PASSWORDS AND HASHES"},{"location":"03/#resources","text":"This cartoon explains it nicely! Sudo in Ubuntu How to use \"sudo\" This is how password cracking is done O'Reilly Book: Practical UNIX and Internet Security on UNIX passwords Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"04/","text":"Day 4 - Installing software, exploring the file structure Complementary video Previous \"Day 4\" threads INTRO As a sysadmin, one of your key tasks is to install new software as required. You'll also need to be very familiar with the layout of the standard directories in a Linux system. You'll be getting practice in both of these areas in today's session. Your tasks today Install a new application from the online repositories Become familiar with some of the standard directories Look at the format and content of some configuration files. Performing your tasks If you've used a smartphone \"app store \" or \"market\", then you'll immediately understand the normal installation of Linux software from the standard repositories. As long as we know what the name or description of a package (=app) is, then we can search for it: apt search \"midnight commander\" This will show a range of matching \"packages\", and we can then install them with apt install command. So to install package mc (Midnight Commander) on Ubuntu: sudo apt install mc (Unless you're already logged in as the root user you need to use sudo before the installation commands - because an ordinary user is not permitted to install software that could impact a whole server). Now that you have mc installed, start it by simply typing mc and pressing Enter . This isn't a \"classic\" Unix application, but once you get over the retro interface you should find navigation fairly easy, so go looking for these directories: /root /home /sbin /etc /var/log ...and use the links in the Resources section below to begin to understand how these are used. You can also read the official manual on this hierarchy by typing man hier . Most key configuration files are kept under /etc and subdirectories of that. These files, and the logs under /var/log are almost invariably simple text files. In the coming days you'll be spending a lot of time with these - but for now simply use F3 to look into their contents. Some interesting files to look at are: /etc/passwd , /etc/ssh/sshd_config and /var/log/auth.log Use F3 again to exit from viewing a file. F10 will exit mc , although you may need to use your mouse to select it. (On an Apple Mac in Terminal, you may need to use ESC+3 to get F3 and ESC+0 for F10) Now use apt search to search for and install some more packages: Try searching for \"hangman.\" You will probably find that an old text-based version is included in a package called bsdgames . Install and play a couple of rounds... Posting your progress Post your progress, comments and questions to the forum. EXTENSION Use mc to view /etc/apt/sources.list where the actual locations of the repositories are specified. Often these will be \"mirror\" sites that are closer to your server than the main Ubuntu servers. Read Repositories - CommandLine for more of the gory details. RESOURCES Ubuntu and Red Hat/CentOS package management comparison Ubuntu Server Guide - Package Management Midnight Commander vs Ranger Linux directory system explained Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 4"},{"location":"04/#day-4-installing-software-exploring-the-file-structure","text":"Complementary video Previous \"Day 4\" threads","title":"Day 4 - Installing software, exploring the file structure"},{"location":"04/#intro","text":"As a sysadmin, one of your key tasks is to install new software as required. You'll also need to be very familiar with the layout of the standard directories in a Linux system. You'll be getting practice in both of these areas in today's session.","title":"INTRO"},{"location":"04/#your-tasks-today","text":"Install a new application from the online repositories Become familiar with some of the standard directories Look at the format and content of some configuration files.","title":"Your tasks today"},{"location":"04/#performing-your-tasks","text":"If you've used a smartphone \"app store \" or \"market\", then you'll immediately understand the normal installation of Linux software from the standard repositories. As long as we know what the name or description of a package (=app) is, then we can search for it: apt search \"midnight commander\" This will show a range of matching \"packages\", and we can then install them with apt install command. So to install package mc (Midnight Commander) on Ubuntu: sudo apt install mc (Unless you're already logged in as the root user you need to use sudo before the installation commands - because an ordinary user is not permitted to install software that could impact a whole server). Now that you have mc installed, start it by simply typing mc and pressing Enter . This isn't a \"classic\" Unix application, but once you get over the retro interface you should find navigation fairly easy, so go looking for these directories: /root /home /sbin /etc /var/log ...and use the links in the Resources section below to begin to understand how these are used. You can also read the official manual on this hierarchy by typing man hier . Most key configuration files are kept under /etc and subdirectories of that. These files, and the logs under /var/log are almost invariably simple text files. In the coming days you'll be spending a lot of time with these - but for now simply use F3 to look into their contents. Some interesting files to look at are: /etc/passwd , /etc/ssh/sshd_config and /var/log/auth.log Use F3 again to exit from viewing a file. F10 will exit mc , although you may need to use your mouse to select it. (On an Apple Mac in Terminal, you may need to use ESC+3 to get F3 and ESC+0 for F10) Now use apt search to search for and install some more packages: Try searching for \"hangman.\" You will probably find that an old text-based version is included in a package called bsdgames . Install and play a couple of rounds...","title":"Performing your tasks"},{"location":"04/#posting-your-progress","text":"Post your progress, comments and questions to the forum.","title":"Posting your progress"},{"location":"04/#extension","text":"Use mc to view /etc/apt/sources.list where the actual locations of the repositories are specified. Often these will be \"mirror\" sites that are closer to your server than the main Ubuntu servers. Read Repositories - CommandLine for more of the gory details.","title":"EXTENSION"},{"location":"04/#resources","text":"Ubuntu and Red Hat/CentOS package management comparison Ubuntu Server Guide - Package Management Midnight Commander vs Ranger Linux directory system explained Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"05/","text":"Day 5 - More or less... Complementary video Previous \"Day 5\" threads INTRO Today we'll end with a bang - with a quick introduction to five different topics. Mastery isn't required today - you'll be getting plenty of practice with all these in the sessions to come! Don't be misled by how simplistic some of these commands may seem - they all have hidden depths and many sysadmins will be using several of these every day. TASKS Use the links in the Resources section to complete these tasks: Get familiar with using more and less for viewing files, including being able to get to the top or bottom of a file in less , and searching for some text Test how \"tab completion\" works - this is a handy feature that helps you enter commands correctly. It helps find both the command and also file name parameters (so typing les then hitting \"Tab\" will complete the command less , but also typing less /etc/serv and pressing \"Tab\" will complete to less /etc/services . Try typing less /etc/s then (without hitting enter) pressing \"Tab\", and again, to see how the feature handles ambiguity. Now that you've typed in quite a few commands, try pressing the \"Up arrow\" to scroll back through them. What you should notice is that not only can you see your most recent commands - but even those from the last time you logged in. Now try the history command - this lists out the whole of your cached command history - often 100 or more entries. There are number of clever things that can be done with this. The simplest is to repeat a command - pick one line to repeat (say number 20) and repeat it by typing !20 and pressing \"Enter\". Later when you'll be typing long, complex, commands this can be very handy. You can also press Ctrl + r , then start typing any part of the command that you are looking for. You'll see an autocomplete of a past command at your prompt. If you keep typing, you'll get more specific options appear. You can either run it by pressing return, or editing it first by pressing arrows or other movement keys. Look for \"hidden\" files in your home directory. In Linux the convention is simply that any file starting with a \".\" character is hidden. So, type cd to return to your \"home directory\" then ls -l to show what files are there. Now type ls -la or ls -ltra (the \"a\" is for \"all\") to show all the files - including those starting with a dot. By far the most common use of \"dot files\" is to keep personal settings in a home directory. So use your new skills with less to look at the contents of .bashrc , .bash_history and others. Finally, use the nano editor to create a file in your home directory and type up a summary of how the last five days have worked for you. RESOURCES Unix Less Command: 10 Tips for Effective Navigation How To Use Bash History Commands and Expansions... BASH Shell commands less Tab completion What are dotfiles? Nano editor tutorials Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 5"},{"location":"05/#day-5-more-or-less","text":"Complementary video Previous \"Day 5\" threads","title":"Day 5 - More or less..."},{"location":"05/#intro","text":"Today we'll end with a bang - with a quick introduction to five different topics. Mastery isn't required today - you'll be getting plenty of practice with all these in the sessions to come! Don't be misled by how simplistic some of these commands may seem - they all have hidden depths and many sysadmins will be using several of these every day.","title":"INTRO"},{"location":"05/#tasks","text":"Use the links in the Resources section to complete these tasks: Get familiar with using more and less for viewing files, including being able to get to the top or bottom of a file in less , and searching for some text Test how \"tab completion\" works - this is a handy feature that helps you enter commands correctly. It helps find both the command and also file name parameters (so typing les then hitting \"Tab\" will complete the command less , but also typing less /etc/serv and pressing \"Tab\" will complete to less /etc/services . Try typing less /etc/s then (without hitting enter) pressing \"Tab\", and again, to see how the feature handles ambiguity. Now that you've typed in quite a few commands, try pressing the \"Up arrow\" to scroll back through them. What you should notice is that not only can you see your most recent commands - but even those from the last time you logged in. Now try the history command - this lists out the whole of your cached command history - often 100 or more entries. There are number of clever things that can be done with this. The simplest is to repeat a command - pick one line to repeat (say number 20) and repeat it by typing !20 and pressing \"Enter\". Later when you'll be typing long, complex, commands this can be very handy. You can also press Ctrl + r , then start typing any part of the command that you are looking for. You'll see an autocomplete of a past command at your prompt. If you keep typing, you'll get more specific options appear. You can either run it by pressing return, or editing it first by pressing arrows or other movement keys. Look for \"hidden\" files in your home directory. In Linux the convention is simply that any file starting with a \".\" character is hidden. So, type cd to return to your \"home directory\" then ls -l to show what files are there. Now type ls -la or ls -ltra (the \"a\" is for \"all\") to show all the files - including those starting with a dot. By far the most common use of \"dot files\" is to keep personal settings in a home directory. So use your new skills with less to look at the contents of .bashrc , .bash_history and others. Finally, use the nano editor to create a file in your home directory and type up a summary of how the last five days have worked for you.","title":"TASKS"},{"location":"05/#resources","text":"Unix Less Command: 10 Tips for Effective Navigation How To Use Bash History Commands and Expansions... BASH Shell commands less Tab completion What are dotfiles? Nano editor tutorials Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"06/","text":"Day 6 - Editing with \"vim\" Complementary video Previous \"Day 6\" threads INTRO Simple text files are at the heart of Linux, so editing these is a key sysadmin skill. There are a range of simple editors aimed at beginners such as: nano , pico , joe or jed . These all look as if they were written for DOS back in the 1980's - but are pretty easy to \"just figure out.\" The Real Sysadmin however, uses vi - this is the editor that's always installed - and today you'll get started using it. Bill Joy wrote vi back in the mid 1970's - and even the \"modern\" descendant vim that we'll concentrate on is over 20 years old, but despite their age, these remain the standard editors on command-line server boxes. Additionally, they have a loyal following among programmers, and even some writers. Very often when you type vi , what the system actually starts is vim . To see if this is true of your system type: vi --version to check. If you are using vim the first line of the massive blob of text will be something like: VIM - Vi IMproved THE TWO THINGS YOU NEED TO KNOW There are two \"modes\" - with very different behaviours Little or nothing onscreen lets you know which mode you're currently in! The two modes are \"normal mode\" and \"insert mode\", and as a beginner, simply remember: \"Press Esc twice or more to return to normal mode\" The \"normal mode\" is used to input commands, and \"insert mode\" for writing text - similar to a regular text editor's default behaviour. INSTRUCTIONS So, first grab a text file to edit. A copy of /etc/services will do nicely: cd pwd cp -v /etc/services testfile ls vi testfile At this point we have the file on screen, and we are in \"normal mode\". Unlike nano , however, there's no onscreen menu and it's not at all obvious how anything works! Start by pressing Esc once or twice to ensure that we are in normal mode (remember this trick from above), then type :q! and press Enter . This quits without saving any changes - a vital first skill when you don't yet know what you're doing! Now let's go in again and play around, seeing how powerful and dangerous vim is - then again, quit without saving: vi testfile Use the keys h j k and l to move around (this is the traditional vi method) then try using the arrow keys - if these work, then feel free to use them - but remember those hjkl keys because one day you may be on a system with just the traditional vi and the arrow keys won't work. h: move one character right j: move one line down k: move one line up l: move one character left Now play around moving through the file. Then exit with Esc Esc :q! as discussed earlier. Now that you've mastered that, lets get more advanced. vi testfile This time, move down a few lines into the file and press 3 then 3 again, then d and d again - and suddenly 33 lines of the file are deleted! Why? Well, you are in normal mode and 33dd is a command that says \"delete 33 lines\". Now, you're still in normal mode, so press u - and you've magically undone the last change you made. Neat huh? Now you know the three basic tricks for a newbie to vim : Esc Esc always gets you back to \"normal mode\" From normal mode :q! will always quit without saving anything you've done, and From normal mode u will undo the last action So, here's some useful, productive things to do: Finding things: From normal mode, type G to get to the bottom of the file, then gg to get to the top. Let's search for references to \"sun\", type /sun followed by enter to find the first instance, then press n repeatedly to step through all the next occurrences. Now go to the top of the file ( gg remember) and try searching for \" Apple \" or \" Microsoft \". Cutting and pasting: Go back up to the top of the file (with gg ) and look at the first few lines of comments (the ones with \"#\" as the first character). Play around with cutting some of these out, and pasting them back. To do this simply position the cursor on a line, then (for example), type 11dd to delete 11 lines, then immediately paste them back in by pressing p - and then move down the file a bit and paste the same 11 lines in there again with p Inserting text: Move anywhere in the file and press i to get into \"insert mode\" (it may show at the bottom of the screen) and start typing - and Esc Esc to get back into normal mode when you're done. Writing your changes to disk: From normal mode type :w to \"write\" but stay in vim , or :wq to \"write and quit.\" This is as much as you ever need to learn about vi - but there's an enormous amount more you could learn if you had the time. Your next step should be to run vimtutor - this official tutorial should always be installed, and takes only 30 minutes. One last thing, you may see reference to \"vi versus emacs\" . This is a long running argument for programmers, not system administrators - vi is what you need to learn. WHY CAN'T I JUST STICK WITH NANO? In many situations as a professional, you'll be working on other people's systems, and they're often very paranoid about stability. You may not have the authority to just \"sudo apt install \" - even if technically you could. However, vi is always installed on any Unix or Linux box from tiny IoT devices to supercomputer clusters. It is actually required by the Single Unix Specification and POSIX. Using vi makes sense if you're aiming to do Linux professionally, but if you're just working on your own systems then by all means choose nano or joe etc. POSTING YOUR PROGRESS Let the forum know how you went. EXTENSION If you're already familiar with vi / vim then use today's hour to research and test some customisation via your ~/.vimrc file. The link below is specifically for sysadmins: Getting more out of Vim RESOURCES Here is why vim uses the hjkl keys as arrow keys Graphical vi-vim Cheat Sheet and Tutorial Vi - Vim Tutorial (video) How to Copy, Cut and Paste in Vim / Vi Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 6"},{"location":"06/#day-6-editing-with-vim","text":"Complementary video Previous \"Day 6\" threads","title":"Day 6 - Editing with \"vim\""},{"location":"06/#intro","text":"Simple text files are at the heart of Linux, so editing these is a key sysadmin skill. There are a range of simple editors aimed at beginners such as: nano , pico , joe or jed . These all look as if they were written for DOS back in the 1980's - but are pretty easy to \"just figure out.\" The Real Sysadmin however, uses vi - this is the editor that's always installed - and today you'll get started using it. Bill Joy wrote vi back in the mid 1970's - and even the \"modern\" descendant vim that we'll concentrate on is over 20 years old, but despite their age, these remain the standard editors on command-line server boxes. Additionally, they have a loyal following among programmers, and even some writers. Very often when you type vi , what the system actually starts is vim . To see if this is true of your system type: vi --version to check. If you are using vim the first line of the massive blob of text will be something like: VIM - Vi IMproved","title":"INTRO"},{"location":"06/#the-two-things-you-need-to-know","text":"There are two \"modes\" - with very different behaviours Little or nothing onscreen lets you know which mode you're currently in! The two modes are \"normal mode\" and \"insert mode\", and as a beginner, simply remember: \"Press Esc twice or more to return to normal mode\" The \"normal mode\" is used to input commands, and \"insert mode\" for writing text - similar to a regular text editor's default behaviour.","title":"THE TWO THINGS YOU NEED TO KNOW"},{"location":"06/#instructions","text":"So, first grab a text file to edit. A copy of /etc/services will do nicely: cd pwd cp -v /etc/services testfile ls vi testfile At this point we have the file on screen, and we are in \"normal mode\". Unlike nano , however, there's no onscreen menu and it's not at all obvious how anything works! Start by pressing Esc once or twice to ensure that we are in normal mode (remember this trick from above), then type :q! and press Enter . This quits without saving any changes - a vital first skill when you don't yet know what you're doing! Now let's go in again and play around, seeing how powerful and dangerous vim is - then again, quit without saving: vi testfile Use the keys h j k and l to move around (this is the traditional vi method) then try using the arrow keys - if these work, then feel free to use them - but remember those hjkl keys because one day you may be on a system with just the traditional vi and the arrow keys won't work. h: move one character right j: move one line down k: move one line up l: move one character left Now play around moving through the file. Then exit with Esc Esc :q! as discussed earlier. Now that you've mastered that, lets get more advanced. vi testfile This time, move down a few lines into the file and press 3 then 3 again, then d and d again - and suddenly 33 lines of the file are deleted! Why? Well, you are in normal mode and 33dd is a command that says \"delete 33 lines\". Now, you're still in normal mode, so press u - and you've magically undone the last change you made. Neat huh? Now you know the three basic tricks for a newbie to vim : Esc Esc always gets you back to \"normal mode\" From normal mode :q! will always quit without saving anything you've done, and From normal mode u will undo the last action So, here's some useful, productive things to do: Finding things: From normal mode, type G to get to the bottom of the file, then gg to get to the top. Let's search for references to \"sun\", type /sun followed by enter to find the first instance, then press n repeatedly to step through all the next occurrences. Now go to the top of the file ( gg remember) and try searching for \" Apple \" or \" Microsoft \". Cutting and pasting: Go back up to the top of the file (with gg ) and look at the first few lines of comments (the ones with \"#\" as the first character). Play around with cutting some of these out, and pasting them back. To do this simply position the cursor on a line, then (for example), type 11dd to delete 11 lines, then immediately paste them back in by pressing p - and then move down the file a bit and paste the same 11 lines in there again with p Inserting text: Move anywhere in the file and press i to get into \"insert mode\" (it may show at the bottom of the screen) and start typing - and Esc Esc to get back into normal mode when you're done. Writing your changes to disk: From normal mode type :w to \"write\" but stay in vim , or :wq to \"write and quit.\" This is as much as you ever need to learn about vi - but there's an enormous amount more you could learn if you had the time. Your next step should be to run vimtutor - this official tutorial should always be installed, and takes only 30 minutes. One last thing, you may see reference to \"vi versus emacs\" . This is a long running argument for programmers, not system administrators - vi is what you need to learn.","title":"INSTRUCTIONS"},{"location":"06/#why-cant-i-just-stick-with-nano","text":"In many situations as a professional, you'll be working on other people's systems, and they're often very paranoid about stability. You may not have the authority to just \"sudo apt install \" - even if technically you could. However, vi is always installed on any Unix or Linux box from tiny IoT devices to supercomputer clusters. It is actually required by the Single Unix Specification and POSIX. Using vi makes sense if you're aiming to do Linux professionally, but if you're just working on your own systems then by all means choose nano or joe etc.","title":"WHY CAN'T I JUST STICK WITH NANO?"},{"location":"06/#posting-your-progress","text":"Let the forum know how you went.","title":"POSTING YOUR PROGRESS"},{"location":"06/#extension","text":"If you're already familiar with vi / vim then use today's hour to research and test some customisation via your ~/.vimrc file. The link below is specifically for sysadmins: Getting more out of Vim","title":"EXTENSION"},{"location":"06/#resources","text":"Here is why vim uses the hjkl keys as arrow keys Graphical vi-vim Cheat Sheet and Tutorial Vi - Vim Tutorial (video) How to Copy, Cut and Paste in Vim / Vi Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"07/","text":"Day 7 - Installing Apache Complementary video Previous \"Day 7\" threads INTRO Today you'll install a common server application - the Apache2 web server - also known as httpd - the \"Hyper Text Transport Protocol Daemon\"! If you're a website professional then you might do things slightly differently, but our focus with this is not on Apache itself, or the website content, but to get a better understanding of: application installation configuration files services logs TASKS Refresh your list of available packages (apps) by: sudo apt update - this takes a moment or two, but ensures that you'll be getting the latest versions. Install Apache from the repository with a simple: sudo apt install apache2 Confirm that it's running by browsing to http://[external IP of your server] - where you should see a confirmation page. Apache is installed as a \"service\" - a program that starts automatically when the server starts and keeps running whether anyone is logged in or not. Try stopping it with the command: sudo systemctl stop apache2 - check that the webpage goes dead - then re-start it with sudo systemctl start apache2 - and check its status with: systemctl status apache2 . As with the vast majority of Linux software, configuration is controlled by files under the /etc directory - check the configuration files under /etc/apache2 especially /etc/apache2/apache2.conf - you can use less to simply view them, or the vi editor (as root) to view and edit as you wish. In /etc/apache2/apache2.conf there's the line with the text: \"IncludeOptional conf-enabled/*.conf\". This tells Apache that the *.conf files in the subdirectory conf-enabled should be merged in with those from /etc/apache2/apache2.conf at load. This approach of lots of small specific config files is common. If you're familiar with configuring web servers, then go crazy, setup some virtual hosts, or add in some mods etc. The location of the default webpage is defined by the DocumentRoot parameter in the file /etc/apache2/sites-enabled/000-default.conf . Use less or vi to view the code of the default page - at /var/www/html/index.html , which is defined via DocumentRoot in the above 000-default.conf file. To make a backup of this file, which a good idea before destroying anything, copy it to your home directory first: cd cp /var/www/html/index.html . ls -l Confirm you see index.html The default page uses a fairly complex modern web design - so you might like to browse to http://54.147.18.200/sample where you'll see a much simpler page. Use View Source in your browser to see the code of this, copy it, and then, at the linux command line, enter sudo vi /var/www/html/index.html to first delete the existing content, then paste in this simple example - and then edit to your own taste. View the result with your workstation browser by again going to http://[external IP of your server] As with most Linux services, Apache keeps its logs under the /var/log directory - look at the logs in /var/log/apache2 - in the access.log file you should be able to see your session from when you browsed to the test page. Notice that there's an overwhelming amount of detail - this is typical, but in a later lesson you'll learn how to filter out just what you want. Notice the error.log file too - this will show the results of your apache restart earlier. Tasks summary sudo apt update sudo apt install apache2 Check via browser to your external IPv4 address sudo systemctl stop apache2 sudo systemctl start apache2 systemctl status apache2 sudo vi /var/www/html/index.html cd /var/log/apache2 less access.log Posting your progress Practice your text-editing skills, and allow your \"classmates\" to judge your progress by editing /var/www/html/index.html with vim and posting the URL to access it to the forum. (It doesn't have to be pretty!) Security As the sysadmin of this server, responsible for its security, you need to be very aware that you've now increased the \"attack surface\" of your server. In addition to ssh on port 22, you are now also exposing the apache2 code on port 80. Over time the logs may reveal access from a wide range of visiting search engines, and attackers - and that's perfectly normal. If you run the commands: sudo apt update , then sudo apt upgrade , and accept the suggested upgrades, then you'll have all the latest security updates, and be secure enough for a test environment - but you should re-run this regularly. EXTENSION Read up on: Using systemctl to manage services RESOURCES HTTPD - Apache2 Web Server The Apache HTTP Server Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 7"},{"location":"07/#day-7-installing-apache","text":"Complementary video Previous \"Day 7\" threads","title":"Day 7 - Installing Apache"},{"location":"07/#intro","text":"Today you'll install a common server application - the Apache2 web server - also known as httpd - the \"Hyper Text Transport Protocol Daemon\"! If you're a website professional then you might do things slightly differently, but our focus with this is not on Apache itself, or the website content, but to get a better understanding of: application installation configuration files services logs","title":"INTRO"},{"location":"07/#tasks","text":"Refresh your list of available packages (apps) by: sudo apt update - this takes a moment or two, but ensures that you'll be getting the latest versions. Install Apache from the repository with a simple: sudo apt install apache2 Confirm that it's running by browsing to http://[external IP of your server] - where you should see a confirmation page. Apache is installed as a \"service\" - a program that starts automatically when the server starts and keeps running whether anyone is logged in or not. Try stopping it with the command: sudo systemctl stop apache2 - check that the webpage goes dead - then re-start it with sudo systemctl start apache2 - and check its status with: systemctl status apache2 . As with the vast majority of Linux software, configuration is controlled by files under the /etc directory - check the configuration files under /etc/apache2 especially /etc/apache2/apache2.conf - you can use less to simply view them, or the vi editor (as root) to view and edit as you wish. In /etc/apache2/apache2.conf there's the line with the text: \"IncludeOptional conf-enabled/*.conf\". This tells Apache that the *.conf files in the subdirectory conf-enabled should be merged in with those from /etc/apache2/apache2.conf at load. This approach of lots of small specific config files is common. If you're familiar with configuring web servers, then go crazy, setup some virtual hosts, or add in some mods etc. The location of the default webpage is defined by the DocumentRoot parameter in the file /etc/apache2/sites-enabled/000-default.conf . Use less or vi to view the code of the default page - at /var/www/html/index.html , which is defined via DocumentRoot in the above 000-default.conf file. To make a backup of this file, which a good idea before destroying anything, copy it to your home directory first: cd cp /var/www/html/index.html . ls -l Confirm you see index.html The default page uses a fairly complex modern web design - so you might like to browse to http://54.147.18.200/sample where you'll see a much simpler page. Use View Source in your browser to see the code of this, copy it, and then, at the linux command line, enter sudo vi /var/www/html/index.html to first delete the existing content, then paste in this simple example - and then edit to your own taste. View the result with your workstation browser by again going to http://[external IP of your server] As with most Linux services, Apache keeps its logs under the /var/log directory - look at the logs in /var/log/apache2 - in the access.log file you should be able to see your session from when you browsed to the test page. Notice that there's an overwhelming amount of detail - this is typical, but in a later lesson you'll learn how to filter out just what you want. Notice the error.log file too - this will show the results of your apache restart earlier.","title":"TASKS"},{"location":"07/#tasks-summary","text":"sudo apt update sudo apt install apache2 Check via browser to your external IPv4 address sudo systemctl stop apache2 sudo systemctl start apache2 systemctl status apache2 sudo vi /var/www/html/index.html cd /var/log/apache2 less access.log","title":"Tasks summary"},{"location":"07/#posting-your-progress","text":"Practice your text-editing skills, and allow your \"classmates\" to judge your progress by editing /var/www/html/index.html with vim and posting the URL to access it to the forum. (It doesn't have to be pretty!)","title":"Posting your progress"},{"location":"07/#security","text":"As the sysadmin of this server, responsible for its security, you need to be very aware that you've now increased the \"attack surface\" of your server. In addition to ssh on port 22, you are now also exposing the apache2 code on port 80. Over time the logs may reveal access from a wide range of visiting search engines, and attackers - and that's perfectly normal. If you run the commands: sudo apt update , then sudo apt upgrade , and accept the suggested upgrades, then you'll have all the latest security updates, and be secure enough for a test environment - but you should re-run this regularly.","title":"Security"},{"location":"07/#extension","text":"Read up on: Using systemctl to manage services","title":"EXTENSION"},{"location":"07/#resources","text":"HTTPD - Apache2 Web Server The Apache HTTP Server Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"08/","text":"Day 8 - the infamous \"grep\"... Complementary video Previous \"Day 8\" threads INTRO Your server is now running two services: the sshd (Secure Shell Daemon) service that you use to login; and the Apache2 web server. Both of these services are generating logs as you and others access your server - and these are text files which we can analyse using some simple tools. Plain text files are a key part of \"the Unix way\" and there are many small \"tools\" to allow you to easily edit, sort, search and otherwise manipulate them. Today we'll use grep , cat , more , less , cut , awk and tail to slice and dice your logs. The grep command is famous for being extremely powerful and handy, but also because its \"nerdy\" name is typical of Unix/Linux conventions. TASKS Dump out the complete contents of a file with cat like this: cat /var/log/apache2/access.log Use less to open the same file, like this: less /var/log/apache2/access.log - and move up and down through the file with your arrow keys, then use \"q\" to quit. Using vi , look at a file and practice moving around using G (go to bottom) and gg (go to top.) Still in vi use /GET + enter to search for GET. Once you see the first match, hit n to see the next match, no enter needed. Use N to see the prior match, also no enter needed. View recent logins and sudo usage by viewing /var/log/auth.log with less , more , or vi . Look at just the tail end of the file with tail /var/log/apache2/access.log (yes, there's also a head command!) Follow a log in real-time with: tail -f /var/log/apache2/access.log Your prompt will not come back since you're watching the log change To make it more obvious that some new log has appeared, hit enter a couple of times to put blank lines on your screen Visit your website with your browser and see the log entries that appear When done, hit <ctrl>-c to exit the tail command Pipes You can take the output of one command and \"pipe\" it in as the input to another by using the | (pipe) symbol So, dump out a file with cat , but pipe that output to grep with a search term - like this: cat /var/log/auth.log | grep \"Disconnect\" To see the same output without needing a pipe, you can use grep \"Disconnect\" /var/log/auth.log Piping allows you to narrow your search, e.g. grep \"Disconnect\" /var/log/auth.log | grep \"root\" Use the cut command to select out most interesting portions of each line by specifying \"--delimiter\" (the thing that separates the fields) and \"--fields\" (the fields you want) The delimiter in the example below is a space character so each time a space appears it creates a new field. Think of a field as a new column in a spreadsheet. The fields specify the position number of the columns that you want to display. grep \"Disconnect\" /var/log/auth.log | grep \"root\" | cut --fields 10- --delimiter \" \" shows field 10 onwards, where the delimiter between fields is the \" \" character. Searching and picking out specific fields can be very useful in extracting useful information from log data. These commands are also easy to automate and insert into reports compared with working with columns in a spreadsheet or database. Use the -v option to invert the selection and find attempts to login with other users: grep \"Disconnect\" /var/log/auth.log | grep -v \"root\" There may not be any other user attempts in this log file It may help to search /var/log/auth.log.1 in addition-- this is the prior week's log Redirect output to a file The output of any command can be \"redirected\" to a file with the \">\" operator. The command: ls -ltr > listing.txt wouldn't list the directory contents to your screen, but instead redirect into the file \"listing.txt\" (creating that file if it didn't exist, or overwriting the contents if it did). Try this: * cd * ls -lrt > my-files.txt * ls -l You should see my-files.txt . Look at its contents with: * cat my-files.txt How about redirecting those log searches from earlier to files for permanent storage or for sending to other people if needed? grep \"Disconnect\" /var/log/auth.log | grep \"root\" > auth-log-report.txt The new auth-log-report.txt file can be viewed with more , vi , etc. POSTING YOUR PROGRESS Re-run the command to list all the IP's that have unsuccessfully tried to login to your server as root - but this time, use the the \">\" operator to redirect it to the file: ~/attackers.txt . You might like to share and compare with others doing the course how heavily you're \"under attack\"! EXTENSION See if you can extend your filtering of auth.log to select just the IP addresses, then pipe this to sort , and then further to uniq to get a list of all those IP addresses that have been \"auditing\" your server security for you. One example: grep \"Disconnected\" /var/log/auth.log | grep \"root\"| cut --fields 12 --delimiter \" \" | sort | uniq --count Advanced exercise: sort by IP address while keeping the complete text of each log entry. Investigate the awk and sed commands. When you're having difficulty figuring out how to do something with grep and cut , then you may need to step up to using these. Googling for \"linux sed tricks\" or \"awk one liners\" will get you many examples. grep \"Disconnect\" /var/log/auth.log | grep \"root\" | awk --field-separator \" \" '{print $11}' | sort | uniq --count Aim to learn at least one simple useful trick with both awk and sed RESOURCES Text processing commands OSTechNix grep tutorial Where GREP came from Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 8"},{"location":"08/#day-8-the-infamous-grep","text":"Complementary video Previous \"Day 8\" threads","title":"Day 8 - the infamous \"grep\"..."},{"location":"08/#intro","text":"Your server is now running two services: the sshd (Secure Shell Daemon) service that you use to login; and the Apache2 web server. Both of these services are generating logs as you and others access your server - and these are text files which we can analyse using some simple tools. Plain text files are a key part of \"the Unix way\" and there are many small \"tools\" to allow you to easily edit, sort, search and otherwise manipulate them. Today we'll use grep , cat , more , less , cut , awk and tail to slice and dice your logs. The grep command is famous for being extremely powerful and handy, but also because its \"nerdy\" name is typical of Unix/Linux conventions.","title":"INTRO"},{"location":"08/#tasks","text":"Dump out the complete contents of a file with cat like this: cat /var/log/apache2/access.log Use less to open the same file, like this: less /var/log/apache2/access.log - and move up and down through the file with your arrow keys, then use \"q\" to quit. Using vi , look at a file and practice moving around using G (go to bottom) and gg (go to top.) Still in vi use /GET + enter to search for GET. Once you see the first match, hit n to see the next match, no enter needed. Use N to see the prior match, also no enter needed. View recent logins and sudo usage by viewing /var/log/auth.log with less , more , or vi . Look at just the tail end of the file with tail /var/log/apache2/access.log (yes, there's also a head command!) Follow a log in real-time with: tail -f /var/log/apache2/access.log Your prompt will not come back since you're watching the log change To make it more obvious that some new log has appeared, hit enter a couple of times to put blank lines on your screen Visit your website with your browser and see the log entries that appear When done, hit <ctrl>-c to exit the tail command","title":"TASKS"},{"location":"08/#pipes","text":"You can take the output of one command and \"pipe\" it in as the input to another by using the | (pipe) symbol So, dump out a file with cat , but pipe that output to grep with a search term - like this: cat /var/log/auth.log | grep \"Disconnect\" To see the same output without needing a pipe, you can use grep \"Disconnect\" /var/log/auth.log Piping allows you to narrow your search, e.g. grep \"Disconnect\" /var/log/auth.log | grep \"root\" Use the cut command to select out most interesting portions of each line by specifying \"--delimiter\" (the thing that separates the fields) and \"--fields\" (the fields you want) The delimiter in the example below is a space character so each time a space appears it creates a new field. Think of a field as a new column in a spreadsheet. The fields specify the position number of the columns that you want to display. grep \"Disconnect\" /var/log/auth.log | grep \"root\" | cut --fields 10- --delimiter \" \" shows field 10 onwards, where the delimiter between fields is the \" \" character. Searching and picking out specific fields can be very useful in extracting useful information from log data. These commands are also easy to automate and insert into reports compared with working with columns in a spreadsheet or database. Use the -v option to invert the selection and find attempts to login with other users: grep \"Disconnect\" /var/log/auth.log | grep -v \"root\" There may not be any other user attempts in this log file It may help to search /var/log/auth.log.1 in addition-- this is the prior week's log","title":"Pipes"},{"location":"08/#redirect-output-to-a-file","text":"The output of any command can be \"redirected\" to a file with the \">\" operator. The command: ls -ltr > listing.txt wouldn't list the directory contents to your screen, but instead redirect into the file \"listing.txt\" (creating that file if it didn't exist, or overwriting the contents if it did). Try this: * cd * ls -lrt > my-files.txt * ls -l You should see my-files.txt . Look at its contents with: * cat my-files.txt How about redirecting those log searches from earlier to files for permanent storage or for sending to other people if needed? grep \"Disconnect\" /var/log/auth.log | grep \"root\" > auth-log-report.txt The new auth-log-report.txt file can be viewed with more , vi , etc.","title":"Redirect output to a file"},{"location":"08/#posting-your-progress","text":"Re-run the command to list all the IP's that have unsuccessfully tried to login to your server as root - but this time, use the the \">\" operator to redirect it to the file: ~/attackers.txt . You might like to share and compare with others doing the course how heavily you're \"under attack\"!","title":"POSTING YOUR PROGRESS"},{"location":"08/#extension","text":"See if you can extend your filtering of auth.log to select just the IP addresses, then pipe this to sort , and then further to uniq to get a list of all those IP addresses that have been \"auditing\" your server security for you. One example: grep \"Disconnected\" /var/log/auth.log | grep \"root\"| cut --fields 12 --delimiter \" \" | sort | uniq --count Advanced exercise: sort by IP address while keeping the complete text of each log entry. Investigate the awk and sed commands. When you're having difficulty figuring out how to do something with grep and cut , then you may need to step up to using these. Googling for \"linux sed tricks\" or \"awk one liners\" will get you many examples. grep \"Disconnect\" /var/log/auth.log | grep \"root\" | awk --field-separator \" \" '{print $11}' | sort | uniq --count Aim to learn at least one simple useful trick with both awk and sed","title":"EXTENSION"},{"location":"08/#resources","text":"Text processing commands OSTechNix grep tutorial Where GREP came from Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"09/","text":"Day 9 - Ports, open and closed Complementary video Previous \"Day 9\" threads INTRO The two services your server is now running are sshd for remote login, and apache2 for web access. These are both \"open to the world\" via the TCP/IP \"ports\" - 22 and 80. As a sysadmin, you need to understand what ports you have open on your servers because each open port is also a potential focus of attacks. You need to be be able to put in place appropriate monitoring and controls. INSTRUCTIONS First we'll look at a couple of ways of determining what ports are open on your server: ss - this, \"socket status\", is a standard utility - replacing the older netstat nmap - this \"port scanner\" won't normally be installed by default There are a wide range of options that can be used with ss , but first try: ss --listening --numeric --tcp --processes sudo ss --listening --numeric --tcp --processes Shows: State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* users:((\"systemd-resolve\",pid=364,fd=13)) LISTEN 0 128 0.0.0.0:22 0.0.0.0:* users:((\"sshd\",pid=625,fd=3)) LISTEN 0 128 [::]:22 [::]:* users:((\"sshd\",pid=625,fd=4)) LISTEN 0 511 *:80 *:* users:((\"apache2\",pid=106630,fd=4),(\"apache2\",pid=106629,fd=4),(\"apache2\",pid=106627,fd=4)) The network notation can be a little confusing, but the lines above show ports 80 and 22 open \"to the world\" on all local IP addresses - and port 53 (DNS) open only on a special local address. Now install nmap with apt install . (For a refresher on this, see Day 4.) This works rather differently, actively probing 1,000 or more ports to check whether they're open. It's most famously used to scan remote machines - please don't - but it's also very handy to check your own configuration, by scanning your server: nmap localhost Shows: Starting Nmap 5.21 ( http://nmap.org ) at 2013-03-17 02:18 UTC Nmap scan report for localhost (127.0.0.1) Host is up (0.00042s latency). Not shown: 998 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 0.08 seconds Port 22 is providing the ssh service, which is how you're connected, so that will be open. If you have Apache running then port 80/http will also be open. Every open port is an increase in the \"attack surface\", so it's Best Practice to shut down services that you don't need. Note that however that \"localhost\" (127.0.0.1), is the loopback network device. Services \"bound\" only to this will only be available on this local machine. To see what's actually exposed to others, first use the ip a command to find the IP address of your actual network card, and then nmap that. You can find your IP address in the middle of the ip a output by looking for \"inet\" addresses. You may see both 10.X.X.X and your public IP assigned to a specific network interface. Host firewall The Linux kernel has built-in firewall functionality called \"netfilter\". We configure and query this via various utilities, the most low-level of which are the iptables command, and the newer nftables . These are powerful, but also complex - so we'll use a more friendly alternative - ufw - the \"uncomplicated firewall\". First let's list what rules are in place by typing sudo iptables -L You will see something like this: Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination So, essentially no firewalling - any traffic is accepted to anywhere. Using ufw is very simple. First we need to install it with: sudo apt install ufw Then, to allow SSH, but disallow HTTP we would type: sudo ufw allow ssh sudo ufw deny http (BEWARE - do not \"deny\" ssh, or you'll lose all contact with your server!) and then enable this with: sudo ufw enable Typing sudo iptables -L now will list the detailed rules generated by this. There will be lots of them! One of these many rules should now be: DROP tcp -- anywhere anywhere tcp dpt:http The effect of this is that although your server is still running Apache, it's no longer accessible from the \"outside\" - all incoming traffic to the destination port of http/80 being DROPed. Test for yourself by revisiting your IP address with a web browser. You will probably want to reverse this with the following so that you (and everyone) can reach your web site again: sudo ufw allow http sudo ufw enable In practice, ensuring that you're not running unnecessary services is often enough protection, and a host-based firewall is unnecessary, but this very much depends on the type of server you are configuring. Regardless, hopefully this session has given you some insight into the concepts. BTW: For this test/learning server you should allow http/80 access again now, because those access.log files will give you a real feel for what it's like to run a server in a hostile world. Using non-standard ports Occasionally it may be reasonable to re-configure a service so that it's provided on a non-standard port - this is particularly common advice for ssh/22 - and would be done by altering the configuration in /etc/ssh/sshd_config Some call this \"security by obscurity\" - equivalent to moving the keyhole on your front door to an unusual place rather than improving the lock itself, or camouflaging your tank rather than improving its armour - but it does effectively eliminate attacks by opportunistic hackers, which is the main threat for most servers. POSTING YOUR PROGRESS As always, feel free to post your progress, or questions, to the forum. EXTENSION Even after denying access, it might be useful to know who's been trying to gain entry. Check out these discussions of logging and more complex setups: How to Log Linux IPTables Firewall Dropped Packets to a Log File Firewalling with iptables - One approach RESOURCES 12 ss Command Examples to Monitor Network Connections UFW - Uncomplicated Firewall Collection of basic Linux Firewall iptables rules 10 Netstat Command Example UFW Uncomplicated Firewall (video) How to install nftables in Ubuntu No, moving your ssh port isn't security by obscurity Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 9"},{"location":"09/#day-9-ports-open-and-closed","text":"Complementary video Previous \"Day 9\" threads","title":"Day 9 - Ports, open and closed"},{"location":"09/#intro","text":"The two services your server is now running are sshd for remote login, and apache2 for web access. These are both \"open to the world\" via the TCP/IP \"ports\" - 22 and 80. As a sysadmin, you need to understand what ports you have open on your servers because each open port is also a potential focus of attacks. You need to be be able to put in place appropriate monitoring and controls.","title":"INTRO"},{"location":"09/#instructions","text":"First we'll look at a couple of ways of determining what ports are open on your server: ss - this, \"socket status\", is a standard utility - replacing the older netstat nmap - this \"port scanner\" won't normally be installed by default There are a wide range of options that can be used with ss , but first try: ss --listening --numeric --tcp --processes sudo ss --listening --numeric --tcp --processes Shows: State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* users:((\"systemd-resolve\",pid=364,fd=13)) LISTEN 0 128 0.0.0.0:22 0.0.0.0:* users:((\"sshd\",pid=625,fd=3)) LISTEN 0 128 [::]:22 [::]:* users:((\"sshd\",pid=625,fd=4)) LISTEN 0 511 *:80 *:* users:((\"apache2\",pid=106630,fd=4),(\"apache2\",pid=106629,fd=4),(\"apache2\",pid=106627,fd=4)) The network notation can be a little confusing, but the lines above show ports 80 and 22 open \"to the world\" on all local IP addresses - and port 53 (DNS) open only on a special local address. Now install nmap with apt install . (For a refresher on this, see Day 4.) This works rather differently, actively probing 1,000 or more ports to check whether they're open. It's most famously used to scan remote machines - please don't - but it's also very handy to check your own configuration, by scanning your server: nmap localhost Shows: Starting Nmap 5.21 ( http://nmap.org ) at 2013-03-17 02:18 UTC Nmap scan report for localhost (127.0.0.1) Host is up (0.00042s latency). Not shown: 998 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 0.08 seconds Port 22 is providing the ssh service, which is how you're connected, so that will be open. If you have Apache running then port 80/http will also be open. Every open port is an increase in the \"attack surface\", so it's Best Practice to shut down services that you don't need. Note that however that \"localhost\" (127.0.0.1), is the loopback network device. Services \"bound\" only to this will only be available on this local machine. To see what's actually exposed to others, first use the ip a command to find the IP address of your actual network card, and then nmap that. You can find your IP address in the middle of the ip a output by looking for \"inet\" addresses. You may see both 10.X.X.X and your public IP assigned to a specific network interface.","title":"INSTRUCTIONS"},{"location":"09/#host-firewall","text":"The Linux kernel has built-in firewall functionality called \"netfilter\". We configure and query this via various utilities, the most low-level of which are the iptables command, and the newer nftables . These are powerful, but also complex - so we'll use a more friendly alternative - ufw - the \"uncomplicated firewall\". First let's list what rules are in place by typing sudo iptables -L You will see something like this: Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination So, essentially no firewalling - any traffic is accepted to anywhere. Using ufw is very simple. First we need to install it with: sudo apt install ufw Then, to allow SSH, but disallow HTTP we would type: sudo ufw allow ssh sudo ufw deny http (BEWARE - do not \"deny\" ssh, or you'll lose all contact with your server!) and then enable this with: sudo ufw enable Typing sudo iptables -L now will list the detailed rules generated by this. There will be lots of them! One of these many rules should now be: DROP tcp -- anywhere anywhere tcp dpt:http The effect of this is that although your server is still running Apache, it's no longer accessible from the \"outside\" - all incoming traffic to the destination port of http/80 being DROPed. Test for yourself by revisiting your IP address with a web browser. You will probably want to reverse this with the following so that you (and everyone) can reach your web site again: sudo ufw allow http sudo ufw enable In practice, ensuring that you're not running unnecessary services is often enough protection, and a host-based firewall is unnecessary, but this very much depends on the type of server you are configuring. Regardless, hopefully this session has given you some insight into the concepts. BTW: For this test/learning server you should allow http/80 access again now, because those access.log files will give you a real feel for what it's like to run a server in a hostile world.","title":"Host firewall"},{"location":"09/#using-non-standard-ports","text":"Occasionally it may be reasonable to re-configure a service so that it's provided on a non-standard port - this is particularly common advice for ssh/22 - and would be done by altering the configuration in /etc/ssh/sshd_config Some call this \"security by obscurity\" - equivalent to moving the keyhole on your front door to an unusual place rather than improving the lock itself, or camouflaging your tank rather than improving its armour - but it does effectively eliminate attacks by opportunistic hackers, which is the main threat for most servers.","title":"Using non-standard ports"},{"location":"09/#posting-your-progress","text":"As always, feel free to post your progress, or questions, to the forum.","title":"POSTING YOUR PROGRESS"},{"location":"09/#extension","text":"Even after denying access, it might be useful to know who's been trying to gain entry. Check out these discussions of logging and more complex setups: How to Log Linux IPTables Firewall Dropped Packets to a Log File Firewalling with iptables - One approach","title":"EXTENSION"},{"location":"09/#resources","text":"12 ss Command Examples to Monitor Network Connections UFW - Uncomplicated Firewall Collection of basic Linux Firewall iptables rules 10 Netstat Command Example UFW Uncomplicated Firewall (video) How to install nftables in Ubuntu No, moving your ssh port isn't security by obscurity Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"10/","text":"Day 10 - Getting the computer to do your work for you Complementary video Previous \"Day 10\" threads INTRO Linux has a rich set of features for running scheduled tasks. One of the key attributes of a good sysadmin is getting the computer to do your work for you (sometimes misrepresented as laziness!) - and a well configured set of scheduled tasks is key to keeping your server running well. CRON Each user potentially has their own set of scheduled tasks which can be listed with the crontab command (list out your user crontab entry with crontab -l and then that for root with sudo crontab -l ). Chances are neither you nor root has a crontab at this point. There's also a system-wide crontab defined in /etc/crontab - use less to look at this. Here's example, along with an explanation: SHELL=/bin/sh PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # m h dom mon dow user command 17 * * * * root cd / && run-parts --report /etc/cron.hourly 25 6 * * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily ) 47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly ) 52 6 1 * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly ) Lines beginning with \"#\" are comments, so # m h dom mon dow user command defines the meanings of the columns. Here's what the above file means: The first line says that at 17mins after every hour, on every day, the credential for \"root\" will be used to run any scripts in the /etc/cron.hourly folder - and similar logic kicks off daily, weekly and monthly scripts. This is a tidy way to organise things, and many Linux distributions use this approach. It does mean we have to look in those /etc/cron.* folders to see what's actually scheduled. On your system type: ls /etc/cron.daily - you'll see something like this (yours will probably be slightly different): apache2 apt aptitude bsdmainutils locate logrotate man-db mlocate standard sysklog Each of these files is a script or a shortcut to a script to do some regular task, and they're run in alphabetic order by run-parts . So in this case apache2 will run first. Use less with the appropriate full pathname for the script to view some of the scripts on your system - many will look very complex and are best left well alone, but others may be just a few lines of simple commands. Look at the articles in the resources section - you should be aware of at and anacron but are not likely to use them in a server. Google for \"logrotate\", and then look at the logs in your own server to see how they've been \"rotated\". Log rotation helps ensure that your server doesn't fill up with logs over time. The logs (and the rotated logs) are in /var/log directory and the rotated files will show up with a .1 extension or .2.gz . If you want to save more information you can reconfigure logrotate to keep more copies of logs. SYSTEMD TIMERS All major Linux distributions now include \"systemd\". As well as starting and stopping services, this can also be used to run tasks at specific times via \"timers\". See which ones are already configured on your server with: systemctl list-timers Use the links in the RESOURCES section to read up about how these timers work. RESOURCES Job scheduling with \"cron\" and \"at\" A good overview of systemd/Timers \"How to Use Systemd Timers as a Cron Replacement\" Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 10"},{"location":"10/#day-10-getting-the-computer-to-do-your-work-for-you","text":"Complementary video Previous \"Day 10\" threads","title":"Day 10 - Getting the computer to do your work for you"},{"location":"10/#intro","text":"Linux has a rich set of features for running scheduled tasks. One of the key attributes of a good sysadmin is getting the computer to do your work for you (sometimes misrepresented as laziness!) - and a well configured set of scheduled tasks is key to keeping your server running well.","title":"INTRO"},{"location":"10/#cron","text":"Each user potentially has their own set of scheduled tasks which can be listed with the crontab command (list out your user crontab entry with crontab -l and then that for root with sudo crontab -l ). Chances are neither you nor root has a crontab at this point. There's also a system-wide crontab defined in /etc/crontab - use less to look at this. Here's example, along with an explanation: SHELL=/bin/sh PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # m h dom mon dow user command 17 * * * * root cd / && run-parts --report /etc/cron.hourly 25 6 * * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily ) 47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly ) 52 6 1 * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly ) Lines beginning with \"#\" are comments, so # m h dom mon dow user command defines the meanings of the columns. Here's what the above file means: The first line says that at 17mins after every hour, on every day, the credential for \"root\" will be used to run any scripts in the /etc/cron.hourly folder - and similar logic kicks off daily, weekly and monthly scripts. This is a tidy way to organise things, and many Linux distributions use this approach. It does mean we have to look in those /etc/cron.* folders to see what's actually scheduled. On your system type: ls /etc/cron.daily - you'll see something like this (yours will probably be slightly different): apache2 apt aptitude bsdmainutils locate logrotate man-db mlocate standard sysklog Each of these files is a script or a shortcut to a script to do some regular task, and they're run in alphabetic order by run-parts . So in this case apache2 will run first. Use less with the appropriate full pathname for the script to view some of the scripts on your system - many will look very complex and are best left well alone, but others may be just a few lines of simple commands. Look at the articles in the resources section - you should be aware of at and anacron but are not likely to use them in a server. Google for \"logrotate\", and then look at the logs in your own server to see how they've been \"rotated\". Log rotation helps ensure that your server doesn't fill up with logs over time. The logs (and the rotated logs) are in /var/log directory and the rotated files will show up with a .1 extension or .2.gz . If you want to save more information you can reconfigure logrotate to keep more copies of logs.","title":"CRON"},{"location":"10/#systemd-timers","text":"All major Linux distributions now include \"systemd\". As well as starting and stopping services, this can also be used to run tasks at specific times via \"timers\". See which ones are already configured on your server with: systemctl list-timers Use the links in the RESOURCES section to read up about how these timers work.","title":"SYSTEMD TIMERS"},{"location":"10/#resources","text":"Job scheduling with \"cron\" and \"at\" A good overview of systemd/Timers \"How to Use Systemd Timers as a Cron Replacement\" Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"10a/","text":"Day 10 - (Optional) Making logins easier INTRO SSH KEYS Using a key instead of a password can make logging in much easier. This can either also make your system less secure, or provide a rare combination of both easier to use as well as more secure. Usually we have to pick just one of those two. Keys work in place of a password, substituting \"something you know\" (the password) with \"something you have\" (the key.) The risk is that someone might get hold of that key, which is not especially difficult if you work from a system shared with others or from a system with typical levels of general security (e.g. a normal Windows desktop PC.) Fortunately ssh keys can be protected with a password (or pass phrase, really) combining both so security is improved. But how is this any different? You still need to enter a password each time, just now it's for a key instead of the system itself. Arguably, this is even more difficult than just using a password since you would need to set up the keys. So why bother? Because ssh-agent can make this local password entry process much less painful. It will hold on to your password locally so your key is available as needed. Using ssh-agent you only need to type your password (or a much more complex pass phrase.) Since you only need to enter this once per session (e.g. daily) it makes using very long pass phrases more tolerable and increases your security. TODO: Describe ssh-agent and authorized_keys SUDOERS TODO: Describe sudoedit and NOPASSWD RESOURCES 2021 Steve Bonds. Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 10.5"},{"location":"10a/#day-10-optional-making-logins-easier","text":"","title":"Day 10 - (Optional) Making logins easier"},{"location":"10a/#intro","text":"","title":"INTRO"},{"location":"10a/#ssh-keys","text":"Using a key instead of a password can make logging in much easier. This can either also make your system less secure, or provide a rare combination of both easier to use as well as more secure. Usually we have to pick just one of those two. Keys work in place of a password, substituting \"something you know\" (the password) with \"something you have\" (the key.) The risk is that someone might get hold of that key, which is not especially difficult if you work from a system shared with others or from a system with typical levels of general security (e.g. a normal Windows desktop PC.) Fortunately ssh keys can be protected with a password (or pass phrase, really) combining both so security is improved. But how is this any different? You still need to enter a password each time, just now it's for a key instead of the system itself. Arguably, this is even more difficult than just using a password since you would need to set up the keys. So why bother? Because ssh-agent can make this local password entry process much less painful. It will hold on to your password locally so your key is available as needed. Using ssh-agent you only need to type your password (or a much more complex pass phrase.) Since you only need to enter this once per session (e.g. daily) it makes using very long pass phrases more tolerable and increases your security. TODO: Describe ssh-agent and authorized_keys","title":"SSH KEYS"},{"location":"10a/#sudoers","text":"TODO: Describe sudoedit and NOPASSWD","title":"SUDOERS"},{"location":"10a/#resources","text":"2021 Steve Bonds. Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"11/","text":"Day 11 - Finding things... Complementary video Previous \"Day 11\" threads INTRO Today we'll look at how you find files, and text inside these files, quickly and efficiently. It can be very frustrating to know that a file or setting exists, but not be able to track it down! Master today's commands and you'll be much more confident as you administer your systems. Today you'll look at four useful tools: locate find grep which INSTRUCTIONS locate If you're looking for a file called access.log then the quickest approach is to use \"locate\" like this: locate access.log /var/log/apache2/access.log /var/log/apache2/access.log.1 /var/log/apache2/access.log.2.gz (If locate is not installed, do so with sudo apt install mlocate ) As you can see, by default it treats a search for \"something\" as a search for \"*something*\" . It's very fast because it searches an index, but if this index is out of date or missing it may not give you the answer you're looking for. This is because the index is created by the updatedb command - typically run only nightly by cron . It may therefore be out of date for recently added files, so it can be worthwhile updating the index by manually running: sudo updatedb . What would you expect to see if you did the below? echo this is a new file > new-file-today.txt locate new-file-today.txt Try it and see! How would you fix this problem? Try that solution and confirm it worked. find The find command searches down through a directory structure looking for files which match some criteria - which could be name, but also size, or when last updated etc. Try these examples: find /var -name access.log find /home -mtime -3 The first searches for files with the name \"access.log\", the second for any file under /home with a last-modified date in the last 3 days. These will take longer than locate did because they search through the filesystem directly rather from an index. Also, because find uses the permissions of the logged-in user you'll get \"permission denied\" messages for many directories if you search the whole system. Starting the command with sudo of course will run it as root - or you could filter the errors with grep like this: find /var -name access.log 2>&1 | grep -vi \"Permission denied\" 2>&1 redirects the error output to the normal output where grep can filter it. Try leaving that off to see what changes: find /var -name access.log | grep -vi \"Permission denied\" These examples are just the tip of a very large iceberg, check the articles in the RESOURCES section and work through as many examples as you can - time spent getting really comfortable with find is not wasted. For example try these exercises: find files only in the / filesystem find files larger than 100MiB in size find all the directories (only) under /etc grep -R Rather than asking \"grep\" to search for text within a specific file, you can give it a whole directory structure, and ask it to recursively search down through it, including following all symbolic links (which -r does not). This trick is particularly handy when you \"just know\" that an item appears \"somewhere\" - but are not sure where. As an example, you know that \"PermitRootLogin\" is an ssh parameter in a config file somewhere under /etc, but can't recall exactly where it is kept: grep -R -i \"PermitRootLogin\" /etc/* Because this only works on plain text files, it's most useful for the /etc and /var/log folders. (Notice the -i which makes the search \"case insensitive\", finding the setting even if it's been entered as \"Permitrootlogin\" You may now have logs like /var/log/access.log.2.gz - these are older logs that have been compressed to save disk space - so you can't read them with less , or search them with grep . However, there are zless and zgrep , which do work, and on ordinary as well as compressed files. which It's sometimes useful to know where a command is being run from. If you type nano , and it starts, where is the nano binary coming from? The general rule is that the system will search through the locations setup in your \"path\". To see this type: echo $PATH To see where nano comes from, type: which nano Try this for grep , vi and service and reboot . You'll notice that they're typically always in subfolders named bin , but that there are several different ones. EXTENSION The \"-exec\" feature of the \"find\" command is extremely powerful. Test some examples of this from the RESOURCES links. Try the following. This is more of a challenge than you might think. find files larger than 100M in size and execute ls -ld on each one, discarding error messages Here's an example of what you may see. Your output will be different but all the files should be large: -rw-rw---- 1 root utmp 123224832 May 1 06:25 /var/log/btmp.1 -r-------- 1 root root 140737477881856 May 2 09:43 /proc/kcore Hint: Error message appear on the stderr file handle, which is number 2. You redirected this earlier using 2>&1 which sent it back to the stdout file handle, which is number 1. A simple place to send output you never want to see is the special \"throwaway\" device, /dev/null . E.g. 2>/dev/null RESOURCES 25 find command examples... 10 Tips for using \"find\" Five simple recipes for \"grep\" Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 11"},{"location":"11/#day-11-finding-things","text":"Complementary video Previous \"Day 11\" threads","title":"Day 11 - Finding things..."},{"location":"11/#intro","text":"Today we'll look at how you find files, and text inside these files, quickly and efficiently. It can be very frustrating to know that a file or setting exists, but not be able to track it down! Master today's commands and you'll be much more confident as you administer your systems. Today you'll look at four useful tools: locate find grep which","title":"INTRO"},{"location":"11/#instructions","text":"","title":"INSTRUCTIONS"},{"location":"11/#locate","text":"If you're looking for a file called access.log then the quickest approach is to use \"locate\" like this: locate access.log /var/log/apache2/access.log /var/log/apache2/access.log.1 /var/log/apache2/access.log.2.gz (If locate is not installed, do so with sudo apt install mlocate ) As you can see, by default it treats a search for \"something\" as a search for \"*something*\" . It's very fast because it searches an index, but if this index is out of date or missing it may not give you the answer you're looking for. This is because the index is created by the updatedb command - typically run only nightly by cron . It may therefore be out of date for recently added files, so it can be worthwhile updating the index by manually running: sudo updatedb . What would you expect to see if you did the below? echo this is a new file > new-file-today.txt locate new-file-today.txt Try it and see! How would you fix this problem? Try that solution and confirm it worked.","title":"locate"},{"location":"11/#find","text":"The find command searches down through a directory structure looking for files which match some criteria - which could be name, but also size, or when last updated etc. Try these examples: find /var -name access.log find /home -mtime -3 The first searches for files with the name \"access.log\", the second for any file under /home with a last-modified date in the last 3 days. These will take longer than locate did because they search through the filesystem directly rather from an index. Also, because find uses the permissions of the logged-in user you'll get \"permission denied\" messages for many directories if you search the whole system. Starting the command with sudo of course will run it as root - or you could filter the errors with grep like this: find /var -name access.log 2>&1 | grep -vi \"Permission denied\" 2>&1 redirects the error output to the normal output where grep can filter it. Try leaving that off to see what changes: find /var -name access.log | grep -vi \"Permission denied\" These examples are just the tip of a very large iceberg, check the articles in the RESOURCES section and work through as many examples as you can - time spent getting really comfortable with find is not wasted. For example try these exercises: find files only in the / filesystem find files larger than 100MiB in size find all the directories (only) under /etc","title":"find"},{"location":"11/#grep-r","text":"Rather than asking \"grep\" to search for text within a specific file, you can give it a whole directory structure, and ask it to recursively search down through it, including following all symbolic links (which -r does not). This trick is particularly handy when you \"just know\" that an item appears \"somewhere\" - but are not sure where. As an example, you know that \"PermitRootLogin\" is an ssh parameter in a config file somewhere under /etc, but can't recall exactly where it is kept: grep -R -i \"PermitRootLogin\" /etc/* Because this only works on plain text files, it's most useful for the /etc and /var/log folders. (Notice the -i which makes the search \"case insensitive\", finding the setting even if it's been entered as \"Permitrootlogin\" You may now have logs like /var/log/access.log.2.gz - these are older logs that have been compressed to save disk space - so you can't read them with less , or search them with grep . However, there are zless and zgrep , which do work, and on ordinary as well as compressed files.","title":"grep -R"},{"location":"11/#which","text":"It's sometimes useful to know where a command is being run from. If you type nano , and it starts, where is the nano binary coming from? The general rule is that the system will search through the locations setup in your \"path\". To see this type: echo $PATH To see where nano comes from, type: which nano Try this for grep , vi and service and reboot . You'll notice that they're typically always in subfolders named bin , but that there are several different ones.","title":"which"},{"location":"11/#extension","text":"The \"-exec\" feature of the \"find\" command is extremely powerful. Test some examples of this from the RESOURCES links. Try the following. This is more of a challenge than you might think. find files larger than 100M in size and execute ls -ld on each one, discarding error messages Here's an example of what you may see. Your output will be different but all the files should be large: -rw-rw---- 1 root utmp 123224832 May 1 06:25 /var/log/btmp.1 -r-------- 1 root root 140737477881856 May 2 09:43 /proc/kcore Hint: Error message appear on the stderr file handle, which is number 2. You redirected this earlier using 2>&1 which sent it back to the stdout file handle, which is number 1. A simple place to send output you never want to see is the special \"throwaway\" device, /dev/null . E.g. 2>/dev/null","title":"EXTENSION"},{"location":"11/#resources","text":"25 find command examples... 10 Tips for using \"find\" Five simple recipes for \"grep\" Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"12/","text":"Day 12 - Copying with SFTP Complementary video Previous \"Day 12\" threads INTRO You've now had a working Internet server of your own for some time, and seen how you can create and edit small files there. You've created a web server where you've been able to edit a simple web page. Today we'll be looking at how you can move files between your other systems and this server - tasks like: Taking a copy of some files from your server onto your desktop machine Copying up some text to your server to put on your webpage Uploading some photos and logos for your webpage PROTOCOLS There are a wide range of ways a Linux server can share files, including: SMB: Microsoft's file sharing, useful on a local network of Windows machines AFP: Apple's file sharing, useful on a local network of Apple machines (outdated) WebDAV: Sharing over web (http) protocols FTP: Traditional Internet sharing protocol (outdated) scp: Simple support for copying files (outdated) rsync: Fast, very efficient file copying. Also excellent at copying file metadata like ownerships, permissions, etc. SFTP: file access and copying over the SSH protocol (Despite the name, the SFTP protocol at a technical level is completely unrelated to traditional FTP) Each of these have their place, but for copying files back and forth from your local desktop to your server, SFTP has a number of key advantages: No extra setup is required on your server Top quality security Allows browsing through the directory structure You can create and delete folders If you're successfully logging in via ssh from your home, work or a cybercafe then you'll also be able to use SFTP from this same location because the same underlying protocol is being used. By contrast, setting up your server for most of the other protocols will require extra work. Not only that, enabling extra protocols also increases the \"attack surface\" - and there's always a chance that you'll mis-configure something in a way that allows an attacker in. It's also very likely that restrictive firewall policies at a workplace will interfere with or block these protocols. Finally, while old-style FTP is still very commonly used, it sends login credentials \"in clear\", so that your flatmates, cafe buddies or employer may be able to grab them off the network by \"packet sniffing\". Not a big issue with your \"classroom\" server - but it's an unacceptable risk if you're remotely administering production servers. Rsync also operates over ssh in most cases, making it a good second choice to SFTP. Its flexibility comes with some increased complexity, so we'll use SFTP in our example. SFTP client software What's required to use SFTP is some client software. A command-line client (unsurprisingly called sftp ) comes standard on every Apple OSX or Linux system. If you're using a Linux desktop, you also have a built-in GUI client via your file manager. This will allow you to easily attach to remote servers via SFTP. (For the Nautilus file manager for example, press ctrl + L to bring up the 'location window\" and type: sftp://username@myserver-address ). Although Windows and Apple macOS have no built-in GUI client there are a wide range of third-party options available, both free and commercial. If you don't already have such a client installed, then choose one such as: WinSCP - for Windows users CyberDuck - for macOS users Download locations are under the RESOURCES section. Configuring and using your choice of these should be straightforward. The only real potential for confusion is that these clients generally support a wide range of protocols such as scp and FTP that we're not going to use. When you're asked for SERVER, give your server's IP address, PORT will be 22, and PROTOCOL will be SFTP or SSH. INSTRUCTIONS Configure your chosen SFTP client to login to your server as your username Copy some files from your server down to your local desktop (try files from your \"home\" folder, and from /var/log ) Create an \" images \" folder under your \"home\" folder on the server, and upload some images to it from your desktop machine Go up to the root directory. You should see /etc , /bin and other folders. Try to create an \" images \" folder here too - this should fail because you are logging in as an ordinary use, so you won't have permission to create new files or folders. In your own \"home\" directory you of course have full permission. Once the files are uploaded you can login via ssh and use sudo to give yourself the necessary power to move files about. POSTING YOUR PROGRESS Post a note to the forum. RESOURCES MacOS: CyberDuck Windows: WinSCP (Watch out for ads with big fake \"download\" buttons.) SFTP - SSH Secure File Transfer Program sftp File From One Server To Another Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 12"},{"location":"12/#day-12-copying-with-sftp","text":"Complementary video Previous \"Day 12\" threads","title":"Day 12 - Copying with SFTP"},{"location":"12/#intro","text":"You've now had a working Internet server of your own for some time, and seen how you can create and edit small files there. You've created a web server where you've been able to edit a simple web page. Today we'll be looking at how you can move files between your other systems and this server - tasks like: Taking a copy of some files from your server onto your desktop machine Copying up some text to your server to put on your webpage Uploading some photos and logos for your webpage","title":"INTRO"},{"location":"12/#protocols","text":"There are a wide range of ways a Linux server can share files, including: SMB: Microsoft's file sharing, useful on a local network of Windows machines AFP: Apple's file sharing, useful on a local network of Apple machines (outdated) WebDAV: Sharing over web (http) protocols FTP: Traditional Internet sharing protocol (outdated) scp: Simple support for copying files (outdated) rsync: Fast, very efficient file copying. Also excellent at copying file metadata like ownerships, permissions, etc. SFTP: file access and copying over the SSH protocol (Despite the name, the SFTP protocol at a technical level is completely unrelated to traditional FTP) Each of these have their place, but for copying files back and forth from your local desktop to your server, SFTP has a number of key advantages: No extra setup is required on your server Top quality security Allows browsing through the directory structure You can create and delete folders If you're successfully logging in via ssh from your home, work or a cybercafe then you'll also be able to use SFTP from this same location because the same underlying protocol is being used. By contrast, setting up your server for most of the other protocols will require extra work. Not only that, enabling extra protocols also increases the \"attack surface\" - and there's always a chance that you'll mis-configure something in a way that allows an attacker in. It's also very likely that restrictive firewall policies at a workplace will interfere with or block these protocols. Finally, while old-style FTP is still very commonly used, it sends login credentials \"in clear\", so that your flatmates, cafe buddies or employer may be able to grab them off the network by \"packet sniffing\". Not a big issue with your \"classroom\" server - but it's an unacceptable risk if you're remotely administering production servers. Rsync also operates over ssh in most cases, making it a good second choice to SFTP. Its flexibility comes with some increased complexity, so we'll use SFTP in our example.","title":"PROTOCOLS"},{"location":"12/#sftp-client-software","text":"What's required to use SFTP is some client software. A command-line client (unsurprisingly called sftp ) comes standard on every Apple OSX or Linux system. If you're using a Linux desktop, you also have a built-in GUI client via your file manager. This will allow you to easily attach to remote servers via SFTP. (For the Nautilus file manager for example, press ctrl + L to bring up the 'location window\" and type: sftp://username@myserver-address ). Although Windows and Apple macOS have no built-in GUI client there are a wide range of third-party options available, both free and commercial. If you don't already have such a client installed, then choose one such as: WinSCP - for Windows users CyberDuck - for macOS users Download locations are under the RESOURCES section. Configuring and using your choice of these should be straightforward. The only real potential for confusion is that these clients generally support a wide range of protocols such as scp and FTP that we're not going to use. When you're asked for SERVER, give your server's IP address, PORT will be 22, and PROTOCOL will be SFTP or SSH.","title":"SFTP client software"},{"location":"12/#instructions","text":"Configure your chosen SFTP client to login to your server as your username Copy some files from your server down to your local desktop (try files from your \"home\" folder, and from /var/log ) Create an \" images \" folder under your \"home\" folder on the server, and upload some images to it from your desktop machine Go up to the root directory. You should see /etc , /bin and other folders. Try to create an \" images \" folder here too - this should fail because you are logging in as an ordinary use, so you won't have permission to create new files or folders. In your own \"home\" directory you of course have full permission. Once the files are uploaded you can login via ssh and use sudo to give yourself the necessary power to move files about.","title":"INSTRUCTIONS"},{"location":"12/#posting-your-progress","text":"Post a note to the forum.","title":"POSTING YOUR PROGRESS"},{"location":"12/#resources","text":"MacOS: CyberDuck Windows: WinSCP (Watch out for ads with big fake \"download\" buttons.) SFTP - SSH Secure File Transfer Program sftp File From One Server To Another Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"13/","text":"Day 13 - Who has permission? Complementary video Previous \"Day 13\" threads INTRO Files on a Linux system always have associated \"permissions\" - controlling who has access and what sort of access. You'll have bumped into this in various ways already - as an example, yesterday while logged in as your \"ordinary\" user, you could not upload files directly into /var/www or create a new folder at / . The Linux permission system is quite simple, but it does have some quirky and subtle aspects, so today is simply an introduction to some of the basic concepts. This time you really do need to work your way through the material in the RESOURCES section! OWNERSHIP First let's look at \"ownership\". All files are tagged with both the name of the user and the group that owns them, so if we type \"ls -l\" and see a file listing like this: -rw------- 1 steve staff 4478979 6 Feb 2011 private.txt -rw-rw-r-- 1 steve staff 4478979 6 Feb 2011 press.txt -rwxr-xr-x 1 steve staff 4478979 6 Feb 2011 upload.bin Then these files are owned by user \"steve\", and the group \"staff\". PERMISSIONS Looking at the '-rw-r--r--\" at the start of a directory listing line, (ignore the first \"-\" for now), and see these as potentially three groups of \"rwx\": the permission granted to the user who owns the file, the \"group\", and \"other people\". For the example list above: private.txt - Steve has \"rw\" (ie Read and Write) permission, but neither the group \"staff\" nor \"other people\" have any permission at all press.txt - Steve can Read and Write to this file too, but so can any member of the group \"staff\" - and anyone can read it upload.bin - Steve can write to the file, all others can read it. Additionally all can \"execute\" the file - ie run this program You can change the permissions on any file with the chmod utility. Create a simple text file in your home directory with vim (e.g. tuesday.txt ) and check that you can list its contents by typing: cat tuesday.txt or less tuesday.txt . Now look at its permissions by doing: ls -ltr tuesday.txt -rw-rw-r-- 1 ubuntu ubuntu 12 Nov 19 14:48 tuesday.txt So, the file is owned by the user \"ubuntu\", and group \"ubuntu\", who are the only ones that can write to the file - but any other user can read it. Now let's remove the permission of the user and \"ubuntu\" group to write their own file: chmod u-w tuesday.txt chmod g-w tuesday.txt ...and remove the permission for \"others\" to read the file: chmod o-r tuesday.txt Do a listing to check the result: -r--r----- 1 ubuntu ubuntu 12 Nov 19 14:48 tuesday.txt ...and confirm by trying to edit the file with nano or vim . You'll find that you appear to be able to edit it - but can't save any changes. (In this case, as the owner, you have \"permission to override permissions\", so can can write with :w! ). You can of course easily give yourself back the permission to write to the file by: chmod u+w tuesday.txt GROUPS On most modern Linux systems there is a group created for each user, so user \"ubuntu\" is a member of the group \"ubuntu\". However, groups can be added as required, and users added to several groups. To see what groups you're a member of, simply type: groups On an Ubuntu system the first user created (in your case ubuntu ), should be a member of the groups: ubuntu , sudo and adm - and if you list the /var/log folder you'll see your membership of the adm group is why you can use less to read and view the contents of /var/log/auth.log The \"root\" user can add a user to an existing group with the command: usermod --append --groups group user so your ubuntu user can do the same simply by prefixing the command with sudo . For example, you could add a new user fred like this: adduser fred Because this user is not the first user created, they don't have the power to run sudo - which your user has by being a member of the group sudo . So, to check which groups fred is a member of, first \"become fred\" - like this: sudo su fred Then: groups Now type \"exit\" to return to your normal user, and you can add fred to this group with: sudo usermod --append --groups sudo fred And of course, you should then check by \"becoming fred\" again and running the groups command. POSTING YOUR PROGRESS Just for fun, create a file: secret.txt in your home folder, take away all permissions from it for the user, group and others - and see what happens when you try to edit it with vi . EXTENSION Research: umask and test to see how it's setup on your server the classic octal mode of describing and setting file permissions. (e.g. chmod 664 myfile ) Look into Linux ACLs: How to manage ACLs on Linux Linux Access Control Lists Also, SELinux and AppArmour: SELinux - development, architecture and operating principles SELinux For Mere Mortals Securing Ubuntu 18 04 with Apparmor RESOURCES File Security chmod Tutorial File and Directory Permissions Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 13"},{"location":"13/#day-13-who-has-permission","text":"Complementary video Previous \"Day 13\" threads","title":"Day 13 -  Who has permission?"},{"location":"13/#intro","text":"Files on a Linux system always have associated \"permissions\" - controlling who has access and what sort of access. You'll have bumped into this in various ways already - as an example, yesterday while logged in as your \"ordinary\" user, you could not upload files directly into /var/www or create a new folder at / . The Linux permission system is quite simple, but it does have some quirky and subtle aspects, so today is simply an introduction to some of the basic concepts. This time you really do need to work your way through the material in the RESOURCES section!","title":"INTRO"},{"location":"13/#ownership","text":"First let's look at \"ownership\". All files are tagged with both the name of the user and the group that owns them, so if we type \"ls -l\" and see a file listing like this: -rw------- 1 steve staff 4478979 6 Feb 2011 private.txt -rw-rw-r-- 1 steve staff 4478979 6 Feb 2011 press.txt -rwxr-xr-x 1 steve staff 4478979 6 Feb 2011 upload.bin Then these files are owned by user \"steve\", and the group \"staff\".","title":"OWNERSHIP"},{"location":"13/#permissions","text":"Looking at the '-rw-r--r--\" at the start of a directory listing line, (ignore the first \"-\" for now), and see these as potentially three groups of \"rwx\": the permission granted to the user who owns the file, the \"group\", and \"other people\". For the example list above: private.txt - Steve has \"rw\" (ie Read and Write) permission, but neither the group \"staff\" nor \"other people\" have any permission at all press.txt - Steve can Read and Write to this file too, but so can any member of the group \"staff\" - and anyone can read it upload.bin - Steve can write to the file, all others can read it. Additionally all can \"execute\" the file - ie run this program You can change the permissions on any file with the chmod utility. Create a simple text file in your home directory with vim (e.g. tuesday.txt ) and check that you can list its contents by typing: cat tuesday.txt or less tuesday.txt . Now look at its permissions by doing: ls -ltr tuesday.txt -rw-rw-r-- 1 ubuntu ubuntu 12 Nov 19 14:48 tuesday.txt So, the file is owned by the user \"ubuntu\", and group \"ubuntu\", who are the only ones that can write to the file - but any other user can read it. Now let's remove the permission of the user and \"ubuntu\" group to write their own file: chmod u-w tuesday.txt chmod g-w tuesday.txt ...and remove the permission for \"others\" to read the file: chmod o-r tuesday.txt Do a listing to check the result: -r--r----- 1 ubuntu ubuntu 12 Nov 19 14:48 tuesday.txt ...and confirm by trying to edit the file with nano or vim . You'll find that you appear to be able to edit it - but can't save any changes. (In this case, as the owner, you have \"permission to override permissions\", so can can write with :w! ). You can of course easily give yourself back the permission to write to the file by: chmod u+w tuesday.txt","title":"PERMISSIONS"},{"location":"13/#groups","text":"On most modern Linux systems there is a group created for each user, so user \"ubuntu\" is a member of the group \"ubuntu\". However, groups can be added as required, and users added to several groups. To see what groups you're a member of, simply type: groups On an Ubuntu system the first user created (in your case ubuntu ), should be a member of the groups: ubuntu , sudo and adm - and if you list the /var/log folder you'll see your membership of the adm group is why you can use less to read and view the contents of /var/log/auth.log The \"root\" user can add a user to an existing group with the command: usermod --append --groups group user so your ubuntu user can do the same simply by prefixing the command with sudo . For example, you could add a new user fred like this: adduser fred Because this user is not the first user created, they don't have the power to run sudo - which your user has by being a member of the group sudo . So, to check which groups fred is a member of, first \"become fred\" - like this: sudo su fred Then: groups Now type \"exit\" to return to your normal user, and you can add fred to this group with: sudo usermod --append --groups sudo fred And of course, you should then check by \"becoming fred\" again and running the groups command.","title":"GROUPS"},{"location":"13/#posting-your-progress","text":"Just for fun, create a file: secret.txt in your home folder, take away all permissions from it for the user, group and others - and see what happens when you try to edit it with vi .","title":"POSTING YOUR PROGRESS"},{"location":"13/#extension","text":"Research: umask and test to see how it's setup on your server the classic octal mode of describing and setting file permissions. (e.g. chmod 664 myfile ) Look into Linux ACLs: How to manage ACLs on Linux Linux Access Control Lists Also, SELinux and AppArmour: SELinux - development, architecture and operating principles SELinux For Mere Mortals Securing Ubuntu 18 04 with Apparmor","title":"EXTENSION"},{"location":"13/#resources","text":"File Security chmod Tutorial File and Directory Permissions Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"14/","text":"Day 14 - Your little helper... Complementary video Previous \"Day 14\" threads INTRO Today you're going to set-up another user on your system. You're going to imagine that this is a help-desk person that you trust to do just a few simple tasks: check that the system is running check disk space with: df -h ...but you also want them to be able to reboot the system, because you believe that \"turning it off and on again\" resolves most problems :-) You'll be covering a several new areas, so have fun! ADDING A USER Choose a name for your new user - we'll use \"helen\" in the examples, so to add this new user: sudo adduser helen (Names are case-sensitive in Linux, so \"Helen\" would be a completely different user) The \"adduser\" command works very slightly differently in each distro - if it didn't ask you for a password for your new user, then set it manually now by: sudo passwd helen You will now have a new entry in the simple text database of users: /etc/passwd (check it out with: less ), and a group of the same name in the file: /etc/group . A hash of the password for the user is in: /etc/shadow (you can read this too if you use \"sudo\" - check the permissions to see how they're set. For obvious reasons it's not readable to just everyone). If you're used to other operating systems it may be hard to believe, but these simple text files are the whole Linux user database and you could even create your users and groups by directly editing these files - although this isn't normally recommended. Additionally, adduser will have created a home directory, /home/helen for example, with the correct permissions. Login as your new user to confirm that everything works. Now while logged in as this user try to run reboot - then sudo reboot . CLEVER SUDO TRICKS Your new user is just an ordinary user and so can't use sudo to run commands with elevated privileges - until we set them up. We could simply add them to a group that's pre-defined to be able to use sudo to do anything as root - but we don't want to give \"helen\" quite that amount of power. Use ls -l to look at the permissions for the file: /etc/sudoers This is where the magic is defined, and you'll see that it's tightly controlled, but you should be able to view it with: sudo less /etc/sudoers You want to add a new entry in there for your new user, and for this you need to run a special utility: visudo To run this, you can temporarily \"become root\" by running: sudo -i Notice that your prompt has changed to a \"#\" Now simply run visudo to begin editing /etc/sudoers - typically this will use nano . All lines in /etc/sudoers beginning with \"#\" are optional comments. You'll want to add some lines like this: # Allow user \"helen\" to run \"sudo reboot\" # ...and don't prompt for a password # helen ALL = NOPASSWD:/sbin/reboot You can add these line in wherever seems reasonable. The visudo command will automatically check your syntax, and won't allow you to save if there are mistakes - because a corrupt sudoers file could lock you out of your server! Type exit to remove your magic hat and become your normal user again - and notice that your prompt reverts to: $ TESTING Test by logging in as your test user and typing: sudo reboot Note that you can \"become\" helen by: sudo su helen If your ssh config allows login only with public keys, you'll need to setup /home/helen/.ssh/authorized_keys - including getting the owner and permissions correct. A little challenge of your understanding of this area! MAKE YOUR LIFE EASIER This might be a good time to make your life a little bit easier. Use sudoedit to reconfigure sudo so you don't need to enter your password when running \"sudo\" any more. There are several ways to do this but the above NOPASSWD: directive will be important to all of them. EXTENSION If you find this all pretty familiar, then you might like to check and update your knowledge on a couple of related areas: Restricting shell access Linux Password & Shadow File Formats ) What's the difference between 'useradd' and 'adduser'? How to create users and groups in Linux from the command line Learn how to use the $EDITOR environmental variable to set your default editor to vim . With this done, ''visudo'' will use ''vim'' rather than ''nano'' for editing. RESOURCES Sudo - An Advanced Howto A cartoon that should now make sense! Basic Linux Permissions: sudo and sudoers (video) Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 14"},{"location":"14/#day-14-your-little-helper","text":"Complementary video Previous \"Day 14\" threads","title":"Day 14 - Your little helper..."},{"location":"14/#intro","text":"Today you're going to set-up another user on your system. You're going to imagine that this is a help-desk person that you trust to do just a few simple tasks: check that the system is running check disk space with: df -h ...but you also want them to be able to reboot the system, because you believe that \"turning it off and on again\" resolves most problems :-) You'll be covering a several new areas, so have fun!","title":"INTRO"},{"location":"14/#adding-a-user","text":"Choose a name for your new user - we'll use \"helen\" in the examples, so to add this new user: sudo adduser helen (Names are case-sensitive in Linux, so \"Helen\" would be a completely different user) The \"adduser\" command works very slightly differently in each distro - if it didn't ask you for a password for your new user, then set it manually now by: sudo passwd helen You will now have a new entry in the simple text database of users: /etc/passwd (check it out with: less ), and a group of the same name in the file: /etc/group . A hash of the password for the user is in: /etc/shadow (you can read this too if you use \"sudo\" - check the permissions to see how they're set. For obvious reasons it's not readable to just everyone). If you're used to other operating systems it may be hard to believe, but these simple text files are the whole Linux user database and you could even create your users and groups by directly editing these files - although this isn't normally recommended. Additionally, adduser will have created a home directory, /home/helen for example, with the correct permissions. Login as your new user to confirm that everything works. Now while logged in as this user try to run reboot - then sudo reboot .","title":"ADDING A USER"},{"location":"14/#clever-sudo-tricks","text":"Your new user is just an ordinary user and so can't use sudo to run commands with elevated privileges - until we set them up. We could simply add them to a group that's pre-defined to be able to use sudo to do anything as root - but we don't want to give \"helen\" quite that amount of power. Use ls -l to look at the permissions for the file: /etc/sudoers This is where the magic is defined, and you'll see that it's tightly controlled, but you should be able to view it with: sudo less /etc/sudoers You want to add a new entry in there for your new user, and for this you need to run a special utility: visudo To run this, you can temporarily \"become root\" by running: sudo -i Notice that your prompt has changed to a \"#\" Now simply run visudo to begin editing /etc/sudoers - typically this will use nano . All lines in /etc/sudoers beginning with \"#\" are optional comments. You'll want to add some lines like this: # Allow user \"helen\" to run \"sudo reboot\" # ...and don't prompt for a password # helen ALL = NOPASSWD:/sbin/reboot You can add these line in wherever seems reasonable. The visudo command will automatically check your syntax, and won't allow you to save if there are mistakes - because a corrupt sudoers file could lock you out of your server! Type exit to remove your magic hat and become your normal user again - and notice that your prompt reverts to: $","title":"CLEVER SUDO TRICKS"},{"location":"14/#testing","text":"Test by logging in as your test user and typing: sudo reboot Note that you can \"become\" helen by: sudo su helen If your ssh config allows login only with public keys, you'll need to setup /home/helen/.ssh/authorized_keys - including getting the owner and permissions correct. A little challenge of your understanding of this area!","title":"TESTING"},{"location":"14/#make-your-life-easier","text":"This might be a good time to make your life a little bit easier. Use sudoedit to reconfigure sudo so you don't need to enter your password when running \"sudo\" any more. There are several ways to do this but the above NOPASSWD: directive will be important to all of them.","title":"MAKE YOUR LIFE EASIER"},{"location":"14/#extension","text":"If you find this all pretty familiar, then you might like to check and update your knowledge on a couple of related areas: Restricting shell access Linux Password & Shadow File Formats ) What's the difference between 'useradd' and 'adduser'? How to create users and groups in Linux from the command line Learn how to use the $EDITOR environmental variable to set your default editor to vim . With this done, ''visudo'' will use ''vim'' rather than ''nano'' for editing.","title":"EXTENSION"},{"location":"14/#resources","text":"Sudo - An Advanced Howto A cartoon that should now make sense! Basic Linux Permissions: sudo and sudoers (video) Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"15/","text":"Day 15 - Deeper into repositories... Complementary video Previous \"Day 15\" threads INTRO Early on you installed some software packages to your server using apt install . That was fairly painless, and we explained how the Linux model of software installation is very similar to how \"app stores\" work on Android, iPhone, and increasingly in MacOS and Windows. Today however, you'll be looking \"under the covers\" to see how this works; better understand the advantages (and disadvantages!) - and to see how you can safely extend the system beyond the main official sources. REPOSITORIES AND VERSIONS Any particular Linux installation has a number of important characteristics: Version - e.g. Ubuntu 20.04, CentOS 5, RHEL 6 \"Bit size\" - 32-bit or 64-bit Chip - Intel, AMD, PowerPC, ARM The version number is particularly important because it controls the versions of application that you can install. When Ubuntu 18.04 was released (in April 2018 - hence the version number!), it came out with Apache 2.4.29. So, if your server runs 18.04, then even if you installed Apache with apt five years later that is still the version you would receive. This provides stability, but at an obvious cost for web designers who hanker after some feature which later versions provide. (Security patches are made to the repositories, but by \"backporting\" security fixes from later versions into the old stable version that was first shipped). WHERE IS ALL THIS SETUP? We'll be discussing the \"package manager\" used by the Debian and Ubuntu distributions, and dozens of derivatives. This uses the apt command, but for most purposes the competing yum and dnf commands used by Fedora, RHEL, CentOS and Scientific Linux work in a very similar way - as do the equivalent utilities in other versions. The configuration is done with files under the /etc/apt directory, and to see where the packages you install are coming from, use less to view /etc/apt/sources.list where you'll see lines that are clearly specifying URLs to a \"repository\" for your specific version: deb http://archive.ubuntu.com/ubuntu precise-security main restricted universe There's no need to be concerned with the exact syntax of this for now, but what's fairly common is to want to add extra repositories - and this is what we'll deal with next. EXTRA REPOSITORIES While there's an amazing amount of software available in the \"standard\" repositories (more than 3,000 for CentOS and ten times that number for Ubuntu), there are often packages not available - typically for one of two reasons: Stability - CentOS is based on RHEL (Red Hat Enterprise Linux), which is firmly focussed on stability in large commercial server installations, so games and many minor packages are not included Ideology - Ubuntu and Debian have a strong \"software freedom\" ethic (this refers to freedom, not price), which means that certain packages you may need are unavailable by default So, next you'll adding an extra repository to your system, and install software from it. ENABLING EXTRA REPOSITORIES First do a quick check to see how many packages you could already install. You can get the full list and details by running: apt-cache dump ...but you'll want to press Ctrl-c a few times to stop that, as it's far too long-winded. Instead, filter out just the packages names using grep , and count them using: wc -l ( wc is \"word count\", and the \"-l\" makes it count lines rather than words) - like this: apt-cache dump | grep \"Package:\" | wc -l These are all the packages you could now install. Sometimes there are extra packages available in if you enable extra repositories. Most Linux distros have a similar concept, but in Ubuntu, often the \"Universe\" and \"Multiverse\" repositories are disabled by default. These are hosted at Ubuntu, but with less support, and Multiverse: \"contains software which has been classified as non-free ...may not include security updates\" . Examples of useful tools in Multiverse might include the compression utilities rar and lha , and the network performance tool netperf . To enable the \"Multiverse\" repository, follow the guide at: Community wiki for command line After adding this, update your local cache of available applications: sudo apt update Once done, you should be able to install netperf like this: sudo apt install netperf ...and the output will show that it's coming from Multiverse. EXTENSION - Ubuntu PPAs Ubuntu also allows users to register an account and setup software in a Personal Package Archive (PPA) - typically these are setup by enthusiastic developers, and allow you to install the latest \"cutting edge\" software. As an example, install and run the neofetch utility. When run, this prints out a summary of your configuration and hardware. This is in the standard repositories, and neofetch --version will show the version. If for some reason you wanted to be have a later version you could install a developer's Neofetch PPA to your software sources by: sudo add-apt-repository ppa:dawidd0811/neofetch As always, after adding a repository, update your local cache of available applications: sudo apt update Then install the package with: sudo apt install neofetch Check with neofetch --version to see what version you have now. When you next run \"sudo apt upgrade\" you'll likely be prompted to install a new version of neofetch - because the developers are sometimes literally making changes every day. (And if it's not obvious, when the developers have a bad day your software will stop working until they make a fix - that's the real \"cutting edge\"!) SUMMARY Installing only from the default repositories is clearly the safest, but there are often good reasons for going beyond them. As a sysadmin you need to judge the risks, but in the example we came up with a realistic scenario where connecting to an unstable working developer's version made sense. As general rule however you: Will seldom have good reasons for hooking into more than one or two extra repositories Need to read up about a repository first, to understand any potential disadvantages. RESOURCES Package management command comparison How to use yum - Introduction Package management with APT What do you mean by Free Software? Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 15"},{"location":"15/#day-15-deeper-into-repositories","text":"Complementary video Previous \"Day 15\" threads","title":"Day 15 - Deeper into repositories..."},{"location":"15/#intro","text":"Early on you installed some software packages to your server using apt install . That was fairly painless, and we explained how the Linux model of software installation is very similar to how \"app stores\" work on Android, iPhone, and increasingly in MacOS and Windows. Today however, you'll be looking \"under the covers\" to see how this works; better understand the advantages (and disadvantages!) - and to see how you can safely extend the system beyond the main official sources.","title":"INTRO"},{"location":"15/#repositories-and-versions","text":"Any particular Linux installation has a number of important characteristics: Version - e.g. Ubuntu 20.04, CentOS 5, RHEL 6 \"Bit size\" - 32-bit or 64-bit Chip - Intel, AMD, PowerPC, ARM The version number is particularly important because it controls the versions of application that you can install. When Ubuntu 18.04 was released (in April 2018 - hence the version number!), it came out with Apache 2.4.29. So, if your server runs 18.04, then even if you installed Apache with apt five years later that is still the version you would receive. This provides stability, but at an obvious cost for web designers who hanker after some feature which later versions provide. (Security patches are made to the repositories, but by \"backporting\" security fixes from later versions into the old stable version that was first shipped).","title":"REPOSITORIES AND VERSIONS"},{"location":"15/#where-is-all-this-setup","text":"We'll be discussing the \"package manager\" used by the Debian and Ubuntu distributions, and dozens of derivatives. This uses the apt command, but for most purposes the competing yum and dnf commands used by Fedora, RHEL, CentOS and Scientific Linux work in a very similar way - as do the equivalent utilities in other versions. The configuration is done with files under the /etc/apt directory, and to see where the packages you install are coming from, use less to view /etc/apt/sources.list where you'll see lines that are clearly specifying URLs to a \"repository\" for your specific version: deb http://archive.ubuntu.com/ubuntu precise-security main restricted universe There's no need to be concerned with the exact syntax of this for now, but what's fairly common is to want to add extra repositories - and this is what we'll deal with next.","title":"WHERE IS ALL THIS SETUP?"},{"location":"15/#extra-repositories","text":"While there's an amazing amount of software available in the \"standard\" repositories (more than 3,000 for CentOS and ten times that number for Ubuntu), there are often packages not available - typically for one of two reasons: Stability - CentOS is based on RHEL (Red Hat Enterprise Linux), which is firmly focussed on stability in large commercial server installations, so games and many minor packages are not included Ideology - Ubuntu and Debian have a strong \"software freedom\" ethic (this refers to freedom, not price), which means that certain packages you may need are unavailable by default So, next you'll adding an extra repository to your system, and install software from it.","title":"EXTRA REPOSITORIES"},{"location":"15/#enabling-extra-repositories","text":"First do a quick check to see how many packages you could already install. You can get the full list and details by running: apt-cache dump ...but you'll want to press Ctrl-c a few times to stop that, as it's far too long-winded. Instead, filter out just the packages names using grep , and count them using: wc -l ( wc is \"word count\", and the \"-l\" makes it count lines rather than words) - like this: apt-cache dump | grep \"Package:\" | wc -l These are all the packages you could now install. Sometimes there are extra packages available in if you enable extra repositories. Most Linux distros have a similar concept, but in Ubuntu, often the \"Universe\" and \"Multiverse\" repositories are disabled by default. These are hosted at Ubuntu, but with less support, and Multiverse: \"contains software which has been classified as non-free ...may not include security updates\" . Examples of useful tools in Multiverse might include the compression utilities rar and lha , and the network performance tool netperf . To enable the \"Multiverse\" repository, follow the guide at: Community wiki for command line After adding this, update your local cache of available applications: sudo apt update Once done, you should be able to install netperf like this: sudo apt install netperf ...and the output will show that it's coming from Multiverse.","title":"ENABLING EXTRA REPOSITORIES"},{"location":"15/#extension-ubuntu-ppas","text":"Ubuntu also allows users to register an account and setup software in a Personal Package Archive (PPA) - typically these are setup by enthusiastic developers, and allow you to install the latest \"cutting edge\" software. As an example, install and run the neofetch utility. When run, this prints out a summary of your configuration and hardware. This is in the standard repositories, and neofetch --version will show the version. If for some reason you wanted to be have a later version you could install a developer's Neofetch PPA to your software sources by: sudo add-apt-repository ppa:dawidd0811/neofetch As always, after adding a repository, update your local cache of available applications: sudo apt update Then install the package with: sudo apt install neofetch Check with neofetch --version to see what version you have now. When you next run \"sudo apt upgrade\" you'll likely be prompted to install a new version of neofetch - because the developers are sometimes literally making changes every day. (And if it's not obvious, when the developers have a bad day your software will stop working until they make a fix - that's the real \"cutting edge\"!)","title":"EXTENSION - Ubuntu PPAs"},{"location":"15/#summary","text":"Installing only from the default repositories is clearly the safest, but there are often good reasons for going beyond them. As a sysadmin you need to judge the risks, but in the example we came up with a realistic scenario where connecting to an unstable working developer's version made sense. As general rule however you: Will seldom have good reasons for hooking into more than one or two extra repositories Need to read up about a repository first, to understand any potential disadvantages.","title":"SUMMARY"},{"location":"15/#resources","text":"Package management command comparison How to use yum - Introduction Package management with APT What do you mean by Free Software? Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"16/","text":"Day 16 - 'tar' and friends... Complementary video Previous \"Day 16\" threads INTRO As a system administrator, you need to be able to confidently work with compressed \u201carchives\u201d of files. In particular two of your key responsibilities; installing new software, and managing backups, often require this. CREATING ARCHIVES On other operating systems, applications like WinZip, and pkzip before it, have long been used to gather a series of files and folders into one compressed file - with a .zip extension. Linux takes a slightly different approach, with the \"gathering\" of files and folders done in one step, and the compression in another. So, you could create a \"snapshot\" of the current files in your /etc/init.d folder like this: tar -cvf myinits.tar /etc/init.d/ This creates myinits.tar in your current directory. Note 1: The -v switch (verbose) is included to give some feedback - traditionally many utilities provide no feedback unless they fail. Note 2: The -f switch specifies that \u201cthe output should go to the filename which follows\u201d - so in this case the order of the switches is important. (The cryptic \u201ctar\u201d name? - originally short for \"tape archive\") You could then compress this file with GnuZip like this: gzip myinits.tar ...which will create myinits.tar.gz . A compressed tar archive like this is known as a \"tarball\". You will also sometimes see tarballs with a .tgz extension - at the Linux commandline this doesn't have any meaning to the system, but is simply helpful to humans. In practice you can do the two steps in one with the \"-z\" switch, like this: tar -cvzf myinits.tgz /etc/init.d/ This uses the -c switch to say that we're creating an archive; -v to make the command \"verbose\"; -z to compress the result - and -f to specify the output file. TASKS FOR TODAY Check the links under \"Resources\" to better understand this - and to find out how to extract files from an archive! Use tar to create an archive copy of some files and check the resulting size Run the same command, but this time use -z to compress - and check the file size Copy your archives to /tmp (with: cp ) and extract each there to test that it works POSTING YOUR PROGRESS Nothing to post today - but make sure you understand this stuff, because we'll be using it for real in the next day's session! EXTENSION What is a .bz2 file - and how would you extract the files from it? Research how absolute and relative paths are handled in tar - and why you need to be careful extracting from archives when logged in as root You might notice that some tutorials write \"tar cvf\" rather than \"tar -cvf\" with the switch character - do you know why? RESOURCES 18 Tar Command Examples in Linux Linux TAR Command Linux tar command tutorial (video) Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 16"},{"location":"16/#day-16-tar-and-friends","text":"Complementary video Previous \"Day 16\" threads","title":"Day 16 - 'tar' and friends..."},{"location":"16/#intro","text":"As a system administrator, you need to be able to confidently work with compressed \u201carchives\u201d of files. In particular two of your key responsibilities; installing new software, and managing backups, often require this.","title":"INTRO"},{"location":"16/#creating-archives","text":"On other operating systems, applications like WinZip, and pkzip before it, have long been used to gather a series of files and folders into one compressed file - with a .zip extension. Linux takes a slightly different approach, with the \"gathering\" of files and folders done in one step, and the compression in another. So, you could create a \"snapshot\" of the current files in your /etc/init.d folder like this: tar -cvf myinits.tar /etc/init.d/ This creates myinits.tar in your current directory. Note 1: The -v switch (verbose) is included to give some feedback - traditionally many utilities provide no feedback unless they fail. Note 2: The -f switch specifies that \u201cthe output should go to the filename which follows\u201d - so in this case the order of the switches is important. (The cryptic \u201ctar\u201d name? - originally short for \"tape archive\") You could then compress this file with GnuZip like this: gzip myinits.tar ...which will create myinits.tar.gz . A compressed tar archive like this is known as a \"tarball\". You will also sometimes see tarballs with a .tgz extension - at the Linux commandline this doesn't have any meaning to the system, but is simply helpful to humans. In practice you can do the two steps in one with the \"-z\" switch, like this: tar -cvzf myinits.tgz /etc/init.d/ This uses the -c switch to say that we're creating an archive; -v to make the command \"verbose\"; -z to compress the result - and -f to specify the output file.","title":"CREATING ARCHIVES"},{"location":"16/#tasks-for-today","text":"Check the links under \"Resources\" to better understand this - and to find out how to extract files from an archive! Use tar to create an archive copy of some files and check the resulting size Run the same command, but this time use -z to compress - and check the file size Copy your archives to /tmp (with: cp ) and extract each there to test that it works","title":"TASKS FOR TODAY"},{"location":"16/#posting-your-progress","text":"Nothing to post today - but make sure you understand this stuff, because we'll be using it for real in the next day's session!","title":"POSTING YOUR PROGRESS"},{"location":"16/#extension","text":"What is a .bz2 file - and how would you extract the files from it? Research how absolute and relative paths are handled in tar - and why you need to be careful extracting from archives when logged in as root You might notice that some tutorials write \"tar cvf\" rather than \"tar -cvf\" with the switch character - do you know why?","title":"EXTENSION"},{"location":"16/#resources","text":"18 Tar Command Examples in Linux Linux TAR Command Linux tar command tutorial (video) Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"17/","text":"Day 17 - From the source Complementary video Previous \"Day 17\" threads INTRO A few days ago we saw how to authorise extra repositories for apt-cache to search when we need unusual applications, or perhaps more recent versions than those in the standard repositories. Today we're going one step further - literally going to \"go to the source\". This is not something to be done lightly - the whole reason for package managers is to make your life easy - but occasionally it is justified, and it is something you need to be aware of and comfortable with. The applications we've been installing up to this point have come from repositories. The files there are \"binaries\" - pre-compiled, and often customised by your distro. What might not be clear is that your distro gets these applications from a diverse range of un-coordinated development projects (the \"upstream\"), and these developers are continuously working on new versions. We\u2019ll go to one of these, download the source, compile and install it. (Another big part of what package managers like apt do, is to identify and install any required \"dependencies\". In the Linux world many open source apps take advantage of existing infrastructure in this way, but it can be a very tricky thing to resolve manually. However, the app we're installing today from source is relatively unusual in being completly standalone). FIRST WE NEED THE ESSENTIALS Projects normally provide their applications as \"source files\", written in the C, C++ or other computer languages. We're going to pull down such a source file, but it won't be any use to us until we compile it into an \"executable\" - a program that our server can execute. So, we'll need to first install a standard bundle of common compilers and similar tools. On Ubuntu, the package of such tools is called \u201cbuild-essential\". Install it like this: sudo apt install build-essential GETTING THE SOURCE First, test that you already have nmap installed, and type nmap -V to see what version you have. This is the version installed from your standard repositories. Next, type: which nmap - to see where the executable is stored. Now let\u2019s go to the \"Project Page\" for the developers http://nmap.org/ and grab the very latest cutting-edge version. Look for the download page, then the section \u201cSource Code Distribution\u201d and the link for the \"Latest development nmap release tarball\" and note the URL for it - something like: https://nmap.org/dist/nmap-7.70.tar.bz2 This is version 7.70, the latest development release when these notes were written, but it may be different now. So now we'll pull this down to your server. The first question is where to put it - we'll put it in your home directory, so change to your home directory with: cd then simply using wget (\"web get\"), to download the file like this: wget -v https://nmap.org/dist/nmap-7.70.tar.bz2 The -v (for verbose), gives some feedback so that you can see what's happening. Once it's finished, check by listing your directory contents: ls -ltr As we\u2019ve learnt, the end of the filename is typically a clue to the file\u2019s format - in this case \".bz2\" signals that it's a tarball compressed with the bz2 algorithm. While we could uncompress this then un-combine the files in two steps, it can be done with one command - like this: tar -j -x -v -f nmap-7.70.tar.bz2 ....where the -j means \"uncompress a bz2 file first\", -x is extract, -v is verbose - and -f says \"the filename comes next\". Normally we'd actually do this more concisely as: tar -jxvf nmap-7.70.tar.bz2 So, lets see the results, ls -ltr Remembering that directories have a leading \"d\" in the listing, you'll see that a directory has been created : -rw-r--r-- 1 steve steve 21633731 2011-10-01 06:46 nmap-7.70.tar.bz2 drwxr-xr-x 20 steve steve 4096 2011-10-01 06:06 nmap-7.70 Now explore the contents of this with mc or simply cd nmap.org/dist/nmap-7.70 - you should be able to use ls and less find and read the actual source code. Even if you know no programming, the comments can be entertaining reading. By convention, source files will typically include in their root directory a series of text files in uppercase such as: README and INSTALLATION. Look for these, and read them using more or less . It's important to realise that the programmers of the \"upstream\" project are not writing for Ubuntu, CentOS - or even Linux. They have written a correct working program in C or C++ etc and made it available, but it's up to us to figure out how to compile it for our operating system, chip type etc. (This hopefully gives a little insight into the value that distributions such as CentOS, Ubuntu and utilities such as apt , yum etc add, and how tough it would be to create your own Linux From Scratch) So, in this case we see an INSTALL file that says something terse like: Ideally, you should be able to just type: ./configure make make install For far more in-depth compilation, installation, and removal notes read the Nmap Install Guide at http://nmap.org/install/ . In fact, this is fairly standard for many packages. Here's what each of the steps does: ./configure - is a script which checks your server (ie to see whether it's ARM or Intel based, 32 or 64-bit, which compiler you have etc). It can also be given parameters to tailor the compilation of the software, such as to not include any extra support for running in a GUI environment - something that would make sense on a \"headless\" (remote text-only server), or to optimize for minimum memory use at the expense of speed - as might make sense if your server has very little RAM. If asked any questions, just take the defaults - and don't panic if you get some WARNING messages, chances are that all will be well. make - compiles the software, typically calling the GNU compiler gcc . This may generate lots of scary looking text, and take a minute or two - or as much as an hour or two for very large packages like LibreOffice. make install - this step takes the compiled files, and installs that plus documentation to your system and in some cases will setup services and scheduled tasks etc. Until now you've just been working in your home directory, but this step installs to the system for all users, so requires root privileges. Because of this, you'll need to actually run: sudo make install . If asked any questions, just take the defaults. Now, potentially this last step will have overwritten the nmap you already had, but more likely this new one has been installed into a different place. In general /bin is for key parts of the operating system, /usr/bin for less critical utilities and /usr/local/bin for software you've chosed to manually install yourself. When you type a command it will search through each of the directories given in your PATH environment variable, and start the first match. So, if /bin/nmap exists, it will run instead of /usr/local/bin - but if you give the \"full path\" to the version you want - such as /usr/local/bin/nmap - it will run that version instead. The \u201clocate\u201d command allows very fast searching for files, but because these files have only just been added, we'll need to manually update the index of files: sudo updatedb Then to search the index: locate bin/nmap This should find both your old and copies of nmap Now try running each, for example: /usr/bin/nmap -V /usr/local/bin/nmap -V The nmap utility relies on no other package or library, so is very easy to install from source. Most other packages have many \"dependencies\", so installing them from source by hand can be pretty challenging even when well explained (look at: http://oss.oetiker.ch/smokeping/doc/smokeping_install.en.html for a good example). NOTE: Because you've done all this outside of the apt system, this binary won't get updates when you run apt update . Not a big issue with a utility like nmap probably, but for anything that runs as an exposed service it's important that you understand that you now have to track security alerts for the application (and all of its dependencies), and install the later fixed versions when they're available. This is a significant pain/risk for a production server. POSTING YOUR PROGRESS Pat yourself on the back if you succeeded today - and let us know in the forum. EXTENSION Research some distributions where \u201cfrom source\u201d is normal: What is Linux From Scratch? What is Gentoo? The Arch Build System None of these is typically used in production servers, but investigating any of them will certainly increase your knowledge of how Linux works \"under the covers\" - asking you to make many choices that the production-ready distros such as RHEL and Ubuntu do on your behalf by choosing what they see as sensible defaults. RESOURCES The magic behind configure, make, make install Installing From Tarballs How to rebuild an existing package from source Compiling things on Ubuntu the Easy Way Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 17"},{"location":"17/#day-17-from-the-source","text":"Complementary video Previous \"Day 17\" threads","title":"Day 17 - From the source"},{"location":"17/#intro","text":"A few days ago we saw how to authorise extra repositories for apt-cache to search when we need unusual applications, or perhaps more recent versions than those in the standard repositories. Today we're going one step further - literally going to \"go to the source\". This is not something to be done lightly - the whole reason for package managers is to make your life easy - but occasionally it is justified, and it is something you need to be aware of and comfortable with. The applications we've been installing up to this point have come from repositories. The files there are \"binaries\" - pre-compiled, and often customised by your distro. What might not be clear is that your distro gets these applications from a diverse range of un-coordinated development projects (the \"upstream\"), and these developers are continuously working on new versions. We\u2019ll go to one of these, download the source, compile and install it. (Another big part of what package managers like apt do, is to identify and install any required \"dependencies\". In the Linux world many open source apps take advantage of existing infrastructure in this way, but it can be a very tricky thing to resolve manually. However, the app we're installing today from source is relatively unusual in being completly standalone).","title":"INTRO"},{"location":"17/#first-we-need-the-essentials","text":"Projects normally provide their applications as \"source files\", written in the C, C++ or other computer languages. We're going to pull down such a source file, but it won't be any use to us until we compile it into an \"executable\" - a program that our server can execute. So, we'll need to first install a standard bundle of common compilers and similar tools. On Ubuntu, the package of such tools is called \u201cbuild-essential\". Install it like this: sudo apt install build-essential","title":"FIRST WE NEED THE ESSENTIALS"},{"location":"17/#getting-the-source","text":"First, test that you already have nmap installed, and type nmap -V to see what version you have. This is the version installed from your standard repositories. Next, type: which nmap - to see where the executable is stored. Now let\u2019s go to the \"Project Page\" for the developers http://nmap.org/ and grab the very latest cutting-edge version. Look for the download page, then the section \u201cSource Code Distribution\u201d and the link for the \"Latest development nmap release tarball\" and note the URL for it - something like: https://nmap.org/dist/nmap-7.70.tar.bz2 This is version 7.70, the latest development release when these notes were written, but it may be different now. So now we'll pull this down to your server. The first question is where to put it - we'll put it in your home directory, so change to your home directory with: cd then simply using wget (\"web get\"), to download the file like this: wget -v https://nmap.org/dist/nmap-7.70.tar.bz2 The -v (for verbose), gives some feedback so that you can see what's happening. Once it's finished, check by listing your directory contents: ls -ltr As we\u2019ve learnt, the end of the filename is typically a clue to the file\u2019s format - in this case \".bz2\" signals that it's a tarball compressed with the bz2 algorithm. While we could uncompress this then un-combine the files in two steps, it can be done with one command - like this: tar -j -x -v -f nmap-7.70.tar.bz2 ....where the -j means \"uncompress a bz2 file first\", -x is extract, -v is verbose - and -f says \"the filename comes next\". Normally we'd actually do this more concisely as: tar -jxvf nmap-7.70.tar.bz2 So, lets see the results, ls -ltr Remembering that directories have a leading \"d\" in the listing, you'll see that a directory has been created : -rw-r--r-- 1 steve steve 21633731 2011-10-01 06:46 nmap-7.70.tar.bz2 drwxr-xr-x 20 steve steve 4096 2011-10-01 06:06 nmap-7.70 Now explore the contents of this with mc or simply cd nmap.org/dist/nmap-7.70 - you should be able to use ls and less find and read the actual source code. Even if you know no programming, the comments can be entertaining reading. By convention, source files will typically include in their root directory a series of text files in uppercase such as: README and INSTALLATION. Look for these, and read them using more or less . It's important to realise that the programmers of the \"upstream\" project are not writing for Ubuntu, CentOS - or even Linux. They have written a correct working program in C or C++ etc and made it available, but it's up to us to figure out how to compile it for our operating system, chip type etc. (This hopefully gives a little insight into the value that distributions such as CentOS, Ubuntu and utilities such as apt , yum etc add, and how tough it would be to create your own Linux From Scratch) So, in this case we see an INSTALL file that says something terse like: Ideally, you should be able to just type: ./configure make make install For far more in-depth compilation, installation, and removal notes read the Nmap Install Guide at http://nmap.org/install/ . In fact, this is fairly standard for many packages. Here's what each of the steps does: ./configure - is a script which checks your server (ie to see whether it's ARM or Intel based, 32 or 64-bit, which compiler you have etc). It can also be given parameters to tailor the compilation of the software, such as to not include any extra support for running in a GUI environment - something that would make sense on a \"headless\" (remote text-only server), or to optimize for minimum memory use at the expense of speed - as might make sense if your server has very little RAM. If asked any questions, just take the defaults - and don't panic if you get some WARNING messages, chances are that all will be well. make - compiles the software, typically calling the GNU compiler gcc . This may generate lots of scary looking text, and take a minute or two - or as much as an hour or two for very large packages like LibreOffice. make install - this step takes the compiled files, and installs that plus documentation to your system and in some cases will setup services and scheduled tasks etc. Until now you've just been working in your home directory, but this step installs to the system for all users, so requires root privileges. Because of this, you'll need to actually run: sudo make install . If asked any questions, just take the defaults. Now, potentially this last step will have overwritten the nmap you already had, but more likely this new one has been installed into a different place. In general /bin is for key parts of the operating system, /usr/bin for less critical utilities and /usr/local/bin for software you've chosed to manually install yourself. When you type a command it will search through each of the directories given in your PATH environment variable, and start the first match. So, if /bin/nmap exists, it will run instead of /usr/local/bin - but if you give the \"full path\" to the version you want - such as /usr/local/bin/nmap - it will run that version instead. The \u201clocate\u201d command allows very fast searching for files, but because these files have only just been added, we'll need to manually update the index of files: sudo updatedb Then to search the index: locate bin/nmap This should find both your old and copies of nmap Now try running each, for example: /usr/bin/nmap -V /usr/local/bin/nmap -V The nmap utility relies on no other package or library, so is very easy to install from source. Most other packages have many \"dependencies\", so installing them from source by hand can be pretty challenging even when well explained (look at: http://oss.oetiker.ch/smokeping/doc/smokeping_install.en.html for a good example). NOTE: Because you've done all this outside of the apt system, this binary won't get updates when you run apt update . Not a big issue with a utility like nmap probably, but for anything that runs as an exposed service it's important that you understand that you now have to track security alerts for the application (and all of its dependencies), and install the later fixed versions when they're available. This is a significant pain/risk for a production server.","title":"GETTING THE SOURCE"},{"location":"17/#posting-your-progress","text":"Pat yourself on the back if you succeeded today - and let us know in the forum.","title":"POSTING YOUR PROGRESS"},{"location":"17/#extension","text":"Research some distributions where \u201cfrom source\u201d is normal: What is Linux From Scratch? What is Gentoo? The Arch Build System None of these is typically used in production servers, but investigating any of them will certainly increase your knowledge of how Linux works \"under the covers\" - asking you to make many choices that the production-ready distros such as RHEL and Ubuntu do on your behalf by choosing what they see as sensible defaults.","title":"EXTENSION"},{"location":"17/#resources","text":"The magic behind configure, make, make install Installing From Tarballs How to rebuild an existing package from source Compiling things on Ubuntu the Easy Way Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"18/","text":"Day 18 - Log rotation Complementary video Previous \"Day 18\" threads INTRO When you\u2019re administering a remote server, logs are your best friend, but disk space problems can be your worst enemy - so while Linux applications are generally very good at generating logs, they need to be controlled. The logrotate application keeps your logs in check. Using this, you can define how many days of logs you wish to keep; split them into manageable files; compress them to save space, or even keep them on a totally separate server. Good sysadmins love automation - having the computer automatically do the boring repetitive stuff Just Makes Sense. ARE YOUR LOGS ROTATING? Look into your logs directories - /var/log , and subdirectories like /var/log/apache2 . Can you see that your logs are already being rotated? You should see a /var/log/syslog file, but also a series of older compressed versions with names like /var/log/syslog.1.gz WHEN DO THEY ROTATE? You will recall that cron is generally setup to run scripts in /etc/cron.daily - so look in there and you should see a script called logrotate - or possibly 00logrotate to force it to be the first task to run. CONFIGURING LOGROTATE The overall configuration is set in /etc/logrotate.conf - have a look at that, but then also look at the files under the directory /etc/logrotate.d , as the contents of these are merged in to create the full configuration. You will probably see one called apache2 , with contents like this: /var/log/apache2/*.log { weekly missingok rotate 52 compress delaycompress notifempty create 640 root adm } Much of this is fairly clear: any apache2 .log file will be rotated each week, with 52 compressed copies being kept. Typically when you install an application a suitable logrotate \u201crecipe\u201d is installed for you, so you\u2019ll not normally be creating these from scratch. However, the default settings won\u2019t always match your requirements, so it\u2019s perfectly reasonable for you as the sysadmin to edit these - for example, the default apache2 recipe above creates 52 weekly logs, but you might find it more useful to have logs rotated daily, a copy automatically emailed to an auditor, and just 30 days worth kept on the server. YOUR TASK TODAY Edit your logrotate configuration for apache2 to rotate daily Make whatever other changes you wish Check the next day to see that it\u2019s worked RESOURCES The Ultimate Logrotate Command Tutorial LINUX: openSUSE and logrotate Use logrotate to Manage Log Files Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 18"},{"location":"18/#day-18-log-rotation","text":"Complementary video Previous \"Day 18\" threads","title":"Day 18 - Log rotation"},{"location":"18/#intro","text":"When you\u2019re administering a remote server, logs are your best friend, but disk space problems can be your worst enemy - so while Linux applications are generally very good at generating logs, they need to be controlled. The logrotate application keeps your logs in check. Using this, you can define how many days of logs you wish to keep; split them into manageable files; compress them to save space, or even keep them on a totally separate server. Good sysadmins love automation - having the computer automatically do the boring repetitive stuff Just Makes Sense.","title":"INTRO"},{"location":"18/#are-your-logs-rotating","text":"Look into your logs directories - /var/log , and subdirectories like /var/log/apache2 . Can you see that your logs are already being rotated? You should see a /var/log/syslog file, but also a series of older compressed versions with names like /var/log/syslog.1.gz","title":"ARE YOUR LOGS ROTATING?"},{"location":"18/#when-do-they-rotate","text":"You will recall that cron is generally setup to run scripts in /etc/cron.daily - so look in there and you should see a script called logrotate - or possibly 00logrotate to force it to be the first task to run.","title":"WHEN DO THEY ROTATE?"},{"location":"18/#configuring-logrotate","text":"The overall configuration is set in /etc/logrotate.conf - have a look at that, but then also look at the files under the directory /etc/logrotate.d , as the contents of these are merged in to create the full configuration. You will probably see one called apache2 , with contents like this: /var/log/apache2/*.log { weekly missingok rotate 52 compress delaycompress notifempty create 640 root adm } Much of this is fairly clear: any apache2 .log file will be rotated each week, with 52 compressed copies being kept. Typically when you install an application a suitable logrotate \u201crecipe\u201d is installed for you, so you\u2019ll not normally be creating these from scratch. However, the default settings won\u2019t always match your requirements, so it\u2019s perfectly reasonable for you as the sysadmin to edit these - for example, the default apache2 recipe above creates 52 weekly logs, but you might find it more useful to have logs rotated daily, a copy automatically emailed to an auditor, and just 30 days worth kept on the server.","title":"CONFIGURING LOGROTATE"},{"location":"18/#your-task-today","text":"Edit your logrotate configuration for apache2 to rotate daily Make whatever other changes you wish Check the next day to see that it\u2019s worked","title":"YOUR TASK TODAY"},{"location":"18/#resources","text":"The Ultimate Logrotate Command Tutorial LINUX: openSUSE and logrotate Use logrotate to Manage Log Files Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"19/","text":"Day 19 - Inodes, symlinks and stat Complementary video Previous \"Day 19\" threads INTRO Today's topic gives a peek \u201cunder the covers\u201d at the technical detail of how files are stored. Linux supports a large number of different \u201cfilesystems\u201d - although on a server you\u2019ll typically be dealing with just ext3 or ext4 and perhaps btrfs - but today we\u2019ll not be dealing with any of these; instead with the layer of Linux that sits above all of these - the Linux Virtual Filesystem. The VFS is a key part of Linux, and an overview of it and some of the surrounding concepts is very useful in confidently administering a system. THE NEXT LAYER DOWN Linux has an extra layer between the filename and the file's actual data on the disk - this is the inode . This has a numerical value which you can see most easily in two ways: The -i switch on the ls command: ls -li /etc/hosts 35356766 -rw------- 1 root root 260 Nov 25 04:59 /etc/hosts The stat command: stat /etc/hosts File: `/etc/hosts' Size: 260 Blocks: 8 IO Block: 4096 regular file Device: 2ch/44d Inode: 35356766 Links: 1 Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2012-11-28 13:09:10.000000000 +0400 Modify: 2012-11-25 04:59:55.000000000 +0400 Change: 2012-11-25 04:59:55.000000000 +0400 Every file name \"points\" to an inode, which in turn points to the actual data on the disk. This means that several filenames could point to the same inode - and hence have exactly the same contents. In fact this is a standard technique - called a \"hard link\". The other important thing to note is that when we view the permissions, ownership and dates of filenames, these attributes are actually kept at the inode level, not the filename. Much of the time this distinction is just theoretical, but it can be very important. TWO SORTS OF LINKS Work through the steps below to get familiar with hard and soft linking: First move to your home directory with: cd Then use the ln (\"link\") command to create a \u201chard link\u201d, like this: ln /etc/passwd link1 and now a \"symbolic link\" (or \u201csymlink\u201d), like this: ln -s /etc/passwd link2 Now use ls -li to view the resulting files, and less or cat to view them. Note that the permissions on a symlink generally show as allowing everthing - but what matters is the permission of the file it points to. Both hard and symlinks are widely used in Linux, but symlinks are especially common - for example: ls -ltr /etc/rc2.d/* This directory holds all the scripts that start when your machine changes to \u201crunlevel 2\u201d (its normal running state) - but you'll see that in fact most of them are symlinks to the real scripts in /etc/init.d It's also very common to have something like : prog prog-v3 prog-v4 where the program \"prog\", is a symlink - originally to v3, but now points to v4 (and could be pointed back if required) Read up in the resources provided, and test on your server to gain a better understanding. In particular, see how permissions and file sizes work with symbolic links versus hard links or simple files The Differences Hard links: Only link to a file, not a directory Can't reference a file on a different disk/volume Links will reference a file even if it is moved Links reference inode/physical locations on the disk Symbolic (soft) links: Can link to directories Can reference a file/folder on a different hard disk/volume Links remain if the original file is deleted Links will NOT reference the file anymore if it is moved Links reference abstract filenames/directories and NOT physical locations. They have their own inode EXTENSION Anatomy of the Linux file system RESOURCES Hard and soft links What's an inode? Everything You Ever Wanted to Know About inodes on Linux Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 19"},{"location":"19/#day-19-inodes-symlinks-and-stat","text":"Complementary video Previous \"Day 19\" threads","title":"Day 19 - Inodes, symlinks and stat"},{"location":"19/#intro","text":"Today's topic gives a peek \u201cunder the covers\u201d at the technical detail of how files are stored. Linux supports a large number of different \u201cfilesystems\u201d - although on a server you\u2019ll typically be dealing with just ext3 or ext4 and perhaps btrfs - but today we\u2019ll not be dealing with any of these; instead with the layer of Linux that sits above all of these - the Linux Virtual Filesystem. The VFS is a key part of Linux, and an overview of it and some of the surrounding concepts is very useful in confidently administering a system.","title":"INTRO"},{"location":"19/#the-next-layer-down","text":"Linux has an extra layer between the filename and the file's actual data on the disk - this is the inode . This has a numerical value which you can see most easily in two ways: The -i switch on the ls command: ls -li /etc/hosts 35356766 -rw------- 1 root root 260 Nov 25 04:59 /etc/hosts The stat command: stat /etc/hosts File: `/etc/hosts' Size: 260 Blocks: 8 IO Block: 4096 regular file Device: 2ch/44d Inode: 35356766 Links: 1 Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2012-11-28 13:09:10.000000000 +0400 Modify: 2012-11-25 04:59:55.000000000 +0400 Change: 2012-11-25 04:59:55.000000000 +0400 Every file name \"points\" to an inode, which in turn points to the actual data on the disk. This means that several filenames could point to the same inode - and hence have exactly the same contents. In fact this is a standard technique - called a \"hard link\". The other important thing to note is that when we view the permissions, ownership and dates of filenames, these attributes are actually kept at the inode level, not the filename. Much of the time this distinction is just theoretical, but it can be very important.","title":"THE NEXT LAYER DOWN"},{"location":"19/#two-sorts-of-links","text":"Work through the steps below to get familiar with hard and soft linking: First move to your home directory with: cd Then use the ln (\"link\") command to create a \u201chard link\u201d, like this: ln /etc/passwd link1 and now a \"symbolic link\" (or \u201csymlink\u201d), like this: ln -s /etc/passwd link2 Now use ls -li to view the resulting files, and less or cat to view them. Note that the permissions on a symlink generally show as allowing everthing - but what matters is the permission of the file it points to. Both hard and symlinks are widely used in Linux, but symlinks are especially common - for example: ls -ltr /etc/rc2.d/* This directory holds all the scripts that start when your machine changes to \u201crunlevel 2\u201d (its normal running state) - but you'll see that in fact most of them are symlinks to the real scripts in /etc/init.d It's also very common to have something like : prog prog-v3 prog-v4 where the program \"prog\", is a symlink - originally to v3, but now points to v4 (and could be pointed back if required) Read up in the resources provided, and test on your server to gain a better understanding. In particular, see how permissions and file sizes work with symbolic links versus hard links or simple files","title":"TWO SORTS OF LINKS"},{"location":"19/#the-differences","text":"Hard links: Only link to a file, not a directory Can't reference a file on a different disk/volume Links will reference a file even if it is moved Links reference inode/physical locations on the disk Symbolic (soft) links: Can link to directories Can reference a file/folder on a different hard disk/volume Links remain if the original file is deleted Links will NOT reference the file anymore if it is moved Links reference abstract filenames/directories and NOT physical locations. They have their own inode","title":"The Differences"},{"location":"19/#extension","text":"Anatomy of the Linux file system","title":"EXTENSION"},{"location":"19/#resources","text":"Hard and soft links What's an inode? Everything You Ever Wanted to Know About inodes on Linux Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"20/","text":"Day 20 - Scripting Complementary video Previous \"Day 20\" threads INTRO Today is the final session for the course. Pat yourself on the back if you worked your way through all lessons! You\u2019ve seen that a continual emphasis for a sysadmin is to automate as much as possible, and also how in Linux the system is very \u201ctransparent\u201d - once you know where to look! Today, on this final session for the course, we\u2019ll cover how to write small programs or \u201cshell scripts\u201d to help manage your system. When typing at the Linux command-line you're directly communicating with \"the command interpreter\", also known as \"the shell\". Normally this shell is bash , so when you string commands together to make a script the result can be called either a '\"shell script\", or a \"bash script\". Why make a script rather than just typing commands in manually? It saves typing. Remember when we searched through the logs with a long string of grep , cut and sort commands? If you need to do something like that more than a few times then turning it into a script saves typing - and typos! Parameters. One script can be used to do several things depending on what parameters you provide Automation. Pop your script in /etc/cron.daily and it will run each day, or install a symlink to it in the appropriate /etc/rc.d folder and you can have it run each time the system is shut down or booted up. START WITH A SHEBANG! Scripts are just simple text files, but if you set the \"execute\" permissions on them then the system will look for a special line starting with the two characters \u201c#\u201d and \u201c!\u201d - referred to as the \"shebang\" (or \"crunchbang\") at the top of the file. This line typically looks like this: #!/bin/bash Normally anything starting with a \"#\" character would be treated as a comment, but in the first line and followed by a \"!\", it's interpreted as: \"please feed the rest of this to the /bin/bash program, which will interpret it as a script\" . All of our scripts will be written in the bash language - the same as you\u2019ve been typing at the command line throughout this course - but scripts can also be written in many other \"scripting languages\", so a script in the Perl language might start with #!/usr/bin/perl and one in Python #!/usr/bin/env python3 YOUR FIRST SCRIPT You'll write a small script to list out who's been most recently unsuccessfully trying to login to your server, using the entries in /var/log/auth.log . Use vim to create a file, attacker , in your home directory with this content: #!/bin/bash # # attacker - prints out the last failed login attempt # echo \"The last failed login attempt came from IP address:\" grep -i \"disconnected from\" /var/log/auth.log|tail -1| cut -d: -f4| cut -f7 -d\" \" Putting comments at the top of the script like this isn't strictly necessary (the computer ignores them), but it's a good professional habit to get into. To make it executable type: chmod +x attacker Now to run this script, you just need to refer to it by name - but the current directory is (deliberately) not in your $PATH, so you need to do this either of two ways: /home/support/attacker ./attacker Once you're happy with a script, and want to have it easily available, you'll probably want to move it somewhere on your $PATH - and /usr/local/bin is a normally the appropriate place, so try this: sudo mv attacker /usr/local/bin/attacker ...and now it will Just Work whenever you type attacker EXTENDING THE SCRIPT You can expand this script so that it requires a parameter and prints out some syntax help when you don't give one. There are a few new tricks in this, so it's worth studying: # ## topattack - list the most persistent attackers # if [ -z \"$1\" ]; then echo -e \"\\nUsage: `basename $0` <num> - Lists the top <num> attackers by IP\" exit 0 fi echo \" \" echo \"Persistant recent attackers\" echo \" \" echo \"Attempts IP \" echo \"-----------------------\" grep \"Disconnected from authenticating user root\" /var/log/auth.log|cut -d: -f 4 | cut -d\" \" -f7|sort |uniq -c |sort -nr |head -$1 Again, use vim to create \"topattack\" , chmod to make it executable and mv to move it into /usr/local/bin once you have it working correctly. (BTW, you can use whois to find details on any of these IPs - just be aware that the system that is \"attacking\" you may be an innocent party that's been hacked into). A collection of simple scripts like this is something that you can easily create to make your sysadmin tasks simpler, quicker and less error prone. And yes, this is the last lesson - so please, feel free to write a review on how the course went for you and what you plan to do with your new knowledge and skills! RESOURCES Learn Bash Scripts - Tutorial (video) Bash scripting tutorial BASH Programming - Introduction HOW-TO How to be a good (and lazy) System Administrator Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 20"},{"location":"20/#day-20-scripting","text":"Complementary video Previous \"Day 20\" threads","title":"Day 20 - Scripting"},{"location":"20/#intro","text":"Today is the final session for the course. Pat yourself on the back if you worked your way through all lessons! You\u2019ve seen that a continual emphasis for a sysadmin is to automate as much as possible, and also how in Linux the system is very \u201ctransparent\u201d - once you know where to look! Today, on this final session for the course, we\u2019ll cover how to write small programs or \u201cshell scripts\u201d to help manage your system. When typing at the Linux command-line you're directly communicating with \"the command interpreter\", also known as \"the shell\". Normally this shell is bash , so when you string commands together to make a script the result can be called either a '\"shell script\", or a \"bash script\". Why make a script rather than just typing commands in manually? It saves typing. Remember when we searched through the logs with a long string of grep , cut and sort commands? If you need to do something like that more than a few times then turning it into a script saves typing - and typos! Parameters. One script can be used to do several things depending on what parameters you provide Automation. Pop your script in /etc/cron.daily and it will run each day, or install a symlink to it in the appropriate /etc/rc.d folder and you can have it run each time the system is shut down or booted up.","title":"INTRO"},{"location":"20/#start-with-a-shebang","text":"Scripts are just simple text files, but if you set the \"execute\" permissions on them then the system will look for a special line starting with the two characters \u201c#\u201d and \u201c!\u201d - referred to as the \"shebang\" (or \"crunchbang\") at the top of the file. This line typically looks like this: #!/bin/bash Normally anything starting with a \"#\" character would be treated as a comment, but in the first line and followed by a \"!\", it's interpreted as: \"please feed the rest of this to the /bin/bash program, which will interpret it as a script\" . All of our scripts will be written in the bash language - the same as you\u2019ve been typing at the command line throughout this course - but scripts can also be written in many other \"scripting languages\", so a script in the Perl language might start with #!/usr/bin/perl and one in Python #!/usr/bin/env python3","title":"START WITH A SHEBANG!"},{"location":"20/#your-first-script","text":"You'll write a small script to list out who's been most recently unsuccessfully trying to login to your server, using the entries in /var/log/auth.log . Use vim to create a file, attacker , in your home directory with this content: #!/bin/bash # # attacker - prints out the last failed login attempt # echo \"The last failed login attempt came from IP address:\" grep -i \"disconnected from\" /var/log/auth.log|tail -1| cut -d: -f4| cut -f7 -d\" \" Putting comments at the top of the script like this isn't strictly necessary (the computer ignores them), but it's a good professional habit to get into. To make it executable type: chmod +x attacker Now to run this script, you just need to refer to it by name - but the current directory is (deliberately) not in your $PATH, so you need to do this either of two ways: /home/support/attacker ./attacker Once you're happy with a script, and want to have it easily available, you'll probably want to move it somewhere on your $PATH - and /usr/local/bin is a normally the appropriate place, so try this: sudo mv attacker /usr/local/bin/attacker ...and now it will Just Work whenever you type attacker","title":"YOUR FIRST SCRIPT"},{"location":"20/#extending-the-script","text":"You can expand this script so that it requires a parameter and prints out some syntax help when you don't give one. There are a few new tricks in this, so it's worth studying: # ## topattack - list the most persistent attackers # if [ -z \"$1\" ]; then echo -e \"\\nUsage: `basename $0` <num> - Lists the top <num> attackers by IP\" exit 0 fi echo \" \" echo \"Persistant recent attackers\" echo \" \" echo \"Attempts IP \" echo \"-----------------------\" grep \"Disconnected from authenticating user root\" /var/log/auth.log|cut -d: -f 4 | cut -d\" \" -f7|sort |uniq -c |sort -nr |head -$1 Again, use vim to create \"topattack\" , chmod to make it executable and mv to move it into /usr/local/bin once you have it working correctly. (BTW, you can use whois to find details on any of these IPs - just be aware that the system that is \"attacking\" you may be an innocent party that's been hacked into). A collection of simple scripts like this is something that you can easily create to make your sysadmin tasks simpler, quicker and less error prone. And yes, this is the last lesson - so please, feel free to write a review on how the course went for you and what you plan to do with your new knowledge and skills!","title":"EXTENDING THE SCRIPT"},{"location":"20/#resources","text":"Learn Bash Scripts - Tutorial (video) Bash scripting tutorial BASH Programming - Introduction HOW-TO How to be a good (and lazy) System Administrator Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"RESOURCES"},{"location":"21/","text":"Day 21 - What next? Complementary video Previous \"Day 21\" threads What is this madness \u2013 surely the course was for just 20 days? Yes, but hopefully you\u2019ll go on learning, so here\u2019s a few suggestions for directions that you might take Play with your server You\u2019re familiar with the server you used during the course, so keep working with it. Maybe uninstall Apache2 and install NGINX, a competing webserver. Keep a running stat on ssh \u201cattackers\u201d. Whatever. A free AWS will last a year, and a $5/mo server should be something you can easily justify. Add services that you\u2019ll use You should now be capable of following tutorials on installing and running your own instance of Minecraft, Wordpress, WireGuard VPN, or Mediawiki. Expect to have some problems \u2013 it's all good experience! Extend your learning Stop browsing articles on Gnome, KDE or i3 \u2013 and start checking out any articles like \u201c 20 Linux commands every sysadmin should know \u201d. Try these out, delve into the options. Like learning a foreign vocabulary, you will only be able to use these \u201cwords\u201d if you know them! Certs If you\u2019re looking to do Linux professionally, and you don\u2019t have an impressive CV or resume already, then you should be aiming at getting a cert. There are really just three certs/tracks that count: CompTIA Linux+ LPI LPIC-1: Linux Administrator \u2013 Very extensive description of the coverage of their various certs/courses. Red Hat \u2013 You could spend a lot of time and money here! (but it might well pay off) Even if you don\u2019t want/need certs, the outline of the topics in these references can give you a good idea of areas to focus on in your self-learning. Affordable professional training LinkedIn Learning Udemy CBT Nuggets All the best! Steve (@snori74) PS: It's traditional to show your appreciation by sending me a real old-fashioned \"Snail Mail\" postcard, with a stamp - this may be one of the last times you use that ancient tech! Steve Brorens 49/60 Port Hills Road Heathcote Valley Christchurch 8022 NEW ZEALAND Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Day 21"},{"location":"21/#day-21-what-next","text":"Complementary video Previous \"Day 21\" threads What is this madness \u2013 surely the course was for just 20 days? Yes, but hopefully you\u2019ll go on learning, so here\u2019s a few suggestions for directions that you might take","title":"Day 21 - What next?"},{"location":"21/#play-with-your-server","text":"You\u2019re familiar with the server you used during the course, so keep working with it. Maybe uninstall Apache2 and install NGINX, a competing webserver. Keep a running stat on ssh \u201cattackers\u201d. Whatever. A free AWS will last a year, and a $5/mo server should be something you can easily justify.","title":"Play with your server"},{"location":"21/#add-services-that-youll-use","text":"You should now be capable of following tutorials on installing and running your own instance of Minecraft, Wordpress, WireGuard VPN, or Mediawiki. Expect to have some problems \u2013 it's all good experience!","title":"Add services that you\u2019ll use"},{"location":"21/#extend-your-learning","text":"Stop browsing articles on Gnome, KDE or i3 \u2013 and start checking out any articles like \u201c 20 Linux commands every sysadmin should know \u201d. Try these out, delve into the options. Like learning a foreign vocabulary, you will only be able to use these \u201cwords\u201d if you know them!","title":"Extend your learning"},{"location":"21/#certs","text":"If you\u2019re looking to do Linux professionally, and you don\u2019t have an impressive CV or resume already, then you should be aiming at getting a cert. There are really just three certs/tracks that count: CompTIA Linux+ LPI LPIC-1: Linux Administrator \u2013 Very extensive description of the coverage of their various certs/courses. Red Hat \u2013 You could spend a lot of time and money here! (but it might well pay off) Even if you don\u2019t want/need certs, the outline of the topics in these references can give you a good idea of areas to focus on in your self-learning.","title":"Certs"},{"location":"21/#affordable-professional-training","text":"LinkedIn Learning Udemy CBT Nuggets All the best! Steve (@snori74) PS: It's traditional to show your appreciation by sending me a real old-fashioned \"Snail Mail\" postcard, with a stamp - this may be one of the last times you use that ancient tech! Steve Brorens 49/60 Port Hills Road Heathcote Valley Christchurch 8022 NEW ZEALAND Copyright 2012-2021 @snori74 (Steve Brorens). Can be reused under the terms of the Creative Commons Attribution 4.0 International Licence (CC BY 4.0).","title":"Affordable professional training"}]}